# common\scripted_effects\zz_evolved_special_effects.txt

# - Create cybernetic species variant
tec_remove_all_ethics = {
	optimize_memory
	if = {
		limit = {
			has_ethic = ethic_materialist
		}
		country_remove_ethic = ethic_materialist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_materialist
		}
		country_remove_ethic = ethic_fanatic_materialist
	}
	if = {
		limit = {
			has_ethic = ethic_spiritualist
		}
		country_remove_ethic = ethic_spiritualist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_spiritualist
		}
		country_remove_ethic = ethic_fanatic_spiritualist
	}

	if = {
		limit = {
			has_ethic = ethic_xenophile
		}
		country_remove_ethic = ethic_xenophile
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_xenophile
		}
		country_remove_ethic = ethic_fanatic_xenophile
	}
	if = {
		limit = {
			has_ethic = ethic_xenophobe
		}
		country_remove_ethic = ethic_xenophobe
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_xenophobe
		}
		country_remove_ethic = ethic_fanatic_xenophobe
	}

	if = {
		limit = {
			has_ethic = ethic_militarist
		}
		country_remove_ethic = ethic_militarist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_militarist
		}
		country_remove_ethic = ethic_fanatic_militarist
	}
	if = {
		limit = {
			has_ethic = ethic_pacifist
		}
		country_remove_ethic = ethic_pacifist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_pacifist
		}
		country_remove_ethic = ethic_fanatic_pacifist
	}

	if = {
		limit = {
			has_ethic = ethic_egalitarian
		}
		country_remove_ethic = ethic_egalitarian
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_egalitarian
		}
		country_remove_ethic = ethic_fanatic_egalitarian
	}
	if = {
		limit = {
			has_ethic = ethic_authoritarian
		}
		country_remove_ethic = ethic_authoritarian
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_authoritarian
		}
		country_remove_ethic = ethic_fanatic_authoritarian
	}

	if = {
		limit = {
			has_ethic = ethic_green
		}
		country_remove_ethic = ethic_green
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_green
		}
		country_remove_ethic = ethic_fanatic_green
	}
	if = {
		limit = {
			has_ethic = ethic_industrial
		}
		country_remove_ethic = ethic_industrial
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_industrial
		}
		country_remove_ethic = ethic_fanatic_industrial
	}

	if = {
		limit = {
			has_ethic = ethic_capitalism
		}
		country_remove_ethic = ethic_capitalism
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_capitalism
		}
		country_remove_ethic = ethic_fanatic_capitalism
	}
	if = {
		limit = {
			has_ethic = ethic_socialism
		}
		country_remove_ethic = ethic_socialism
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_socialism
		}
		country_remove_ethic = ethic_fanatic_socialism
	}

	if = {
		limit = {
			has_ethic = ethic_pluralist
		}
		country_remove_ethic = ethic_pluralist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_pluralist
		}
		country_remove_ethic = ethic_fanatic_pluralist
	}
	if = {
		limit = {
			has_ethic = ethic_elitist
		}
		country_remove_ethic = ethic_elitist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_elitist
		}
		country_remove_ethic = ethic_fanatic_elitist
	}

	if = {
		limit = {
			has_ethic = ethic_gestalt_consciousness
		}
		country_remove_ethic = ethic_gestalt_consciousness
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_apathy
		}
		country_remove_ethic = ethic_gestalt_apathy
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_empathy
		}
		country_remove_ethic = ethic_gestalt_empathy
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_preservation
		}
		country_remove_ethic = ethic_gestalt_preservation
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_disregard
		}
		country_remove_ethic = ethic_gestalt_disregard
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_introspective
		}
		country_remove_ethic = ethic_gestalt_introspective
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_extrospective
		}
		country_remove_ethic = ethic_gestalt_extrospective
	}
}

# Test

# effect tec_test_planet
tec_test_planet = {
	optimize_memory
	change_pc = pc_gaia
	set_planet_size = 25
	reroll_planet = yes
	add_modifier = {
		modifier = modifier_tec_debug_building
		days = -1
	}
	create_colony = {
		owner = From
	}
	while = {
		count = 20
		add_district_and_planet_size_if_needed_effect = {
			district = district_city
		}
	}
	while = {
		count = 8
		add_building = building_commercial_megaplex
	}
	remove_building = building_colony_shelter
	add_building = building_galactic_capital
}

tec_test_ascension_techs = {
	optimize_memory
	give_technology = {
		tech = tech_gene_tailoring
		message = no
	}

	give_technology = {
		tech = tech_robotic_workers
		message = no
	}
	give_technology = {
		tech = tech_droid_workers
		message = no
	}
	give_technology = {
		tech = tech_synthetic_workers
		message = no
	}
	give_technology = {
		tech = tech_synthetic_leaders
		message = no
	}

	give_technology = {
		tech = tech_psionic_theory
		message = no
	}

}

tec_test_mega_techs = {
	optimize_memory
	give_technology = {
		tech = tech_housing_1
		message = no
	}
	give_technology = {
		tech = tech_housing_2
		message = no
	}

	give_technology = {
		tech = tech_mega_engineering
		message = no
	}

	give_technology = {
		tech = tech_ring_world
		message = no
	}
	give_technology = {
		tech = tech_dyson_sphere
		message = no
	}
	give_technology = {
		tech = tech_matter_decompressor
		message = no
	}

}

tec_test_robot_tech = {
	optimize_memory
	give_technology = {
		tech = tech_robomodding
	}
}

tec_test_betharian = {	# ON PLANET!!!
	optimize_memory
	add_deposit = d_dust_desert
	add_deposit = d_dust_desert
	add_deposit = d_crystalline_caverns
	add_deposit = d_crystalline_caverns
	add_deposit = d_crystalline_caverns
	add_deposit = d_bubbling_swamp
	add_deposit = d_bubbling_swamp
	add_deposit = d_bubbling_swamp
	add_deposit = d_bubbling_swamp
	add_deposit = d_bubbling_swamp
	add_deposit = d_betharian_deposit
	owner = {
		give_technology = {
			tech = tech_mine_betharian
		}
	}
}

tec_test_relations = {
	optimize_memory
	set_global_flag = tec_debug_opinion
	every_playable_country = {
		establish_communications_no_message = root
		add_opinion_modifier = {
			who = root
			modifier = opinion_tec_debug
		}
	}
}

tec_test_assimilations = {
	optimize_memory
	set_global_flag = tec_test_assimilations
	set_country_flag = tec_test_assimilations
}

tec_test_assimilations_off = {
	optimize_memory
	remove_global_flag = tec_test_assimilations
	remove_country_flag = tec_test_assimilations
}

tec_test_catalytic_artisan = {
	optimize_memory
	if = {
		limit = {
			NOT = {
				has_valid_civic = civic_catalytic_processing
			}
		}
		force_add_civic = civic_catalytic_processing
	}
	if = {
		limit = {
			NOT = {
				has_valid_civic = civic_crafters	
			}
		}
		force_add_civic = civic_crafters
	}
}

tec_yeet_catalytic_artisan = {
	optimize_memory
	if = {
		limit = {
			has_valid_civic = civic_catalytic_processing
		}
		force_remove_civic = civic_catalytic_processing
	}
	if = {
		limit = {
			has_valid_civic = civic_crafters
		}
		force_remove_civic = civic_crafters
	}
}

tec_spawn_cyborgs = {
	break = yes
}

tec_debug_count_buildings = {
	optimize_memory
	# USE ON COUNTRY
	export_trigger_value_to_variable = {
		trigger = num_buildings
		parameters = {
			type = building_research_lab_1
		}
		variable = tec_ai_power_add_1
	}
	export_trigger_value_to_variable = {
		trigger = num_buildings
		parameters = {
			type = building_research_lab_2
		}
		variable = tec_ai_power_add_2
	}
	export_trigger_value_to_variable = {
		trigger = num_buildings
		parameters = {
			type = building_research_lab_3
		}
		variable = tec_ai_power_add_4
	}
	


	#tec_ai_power = {
	#	base = 0
	#	complex_trigger_modifier = {
	#		trigger = num_buildings
	#		parameters = {
	#			type = building_tec_aiauth_1 
	#		}
	#		mode = add
	#	}
	#	complex_trigger_modifier = {
	#		trigger = num_buildings
	#		parameters = {
	#			type = building_tec_aiauth_2 
	#		}
	#		mode = add
	#		mult = 2
	#	}
	#	complex_trigger_modifier = {
	#		trigger = num_buildings
	#		parameters = {
	#			type = building_tec_aiauth_3 
	#		}
	#		mode = add
	#		mult = 4
	#	}
	#}
}


# D E B U G 

tec_fix_any_bugged_species = {

	owner_main_species = {
		save_event_target_as = changing_species

		create_species = {
			is_mod = yes
			name = this
			name_list = this
			plural = this
			class = MAM
			portrait = this
			can_be_modified = this
			gender = this
			homeworld = capital_scope
			traits = this
	
			effect = {
				save_event_target_as = last_created_species
			}
		}

		owner = {
			every_owned_pop = {
				limit = { is_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = {
					tec_should_leader_be_assimilated = yes
					is_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = {
					tec_should_leader_be_assimilated = yes
					is_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_envoy = {
				limit = {
					tec_should_leader_be_assimilated = yes
					is_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
}

tec_remove_sovereign_type_civic_effect = {
	if = {
		limit = {
			has_civic = civic_galactic_sovereign
		}
		force_remove_civic = civic_galactic_sovereign
	}
	if = {
		limit = {
			has_civic = civic_galactic_sovereign_megacorp
		}
		force_remove_civic = civic_galactic_sovereign_megacorp
	}
	if = {
		limit = {
			has_civic = civic_psionic_sovereign
		}
		force_remove_civic = civic_psionic_sovereign
	}
}

tec_force_ideology_civic_effect = {
	if = {
		limit = {
			root = { has_civic = civic_shared_burden }
		}
		force_remove_civic = civic_shared_burden
		force_add_civic = civic_shared_burden
	}
	if = {
		limit = {
			root = { has_civic = civic_crusader_spirit }
		}
		force_remove_civic = civic_crusader_spirit
		force_add_civic = civic_crusader_spirit
	}
}

tec_remove_vassal_civic_effect = {
	if = {
		limit = {
			tec_is_pompous_empire = yes
		}
		force_remove_civic = civic_pompous_purists
		force_remove_civic = civic_tec_corporate_pompous
		force_remove_civic = civic_tec_hive_pompous
		force_remove_civic = civic_tec_machine_pompous
		change_government = {
			cooldown = no
			civics = { civic = random }
		}
	}
}

