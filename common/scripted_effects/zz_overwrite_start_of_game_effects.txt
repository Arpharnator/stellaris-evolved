# O V E R W R I T E 
# 00_scripted_effects.txt

add_district_and_planet_size_if_needed_effect = {
	optimize_memory
	if = {
		limit = {
			free_district_slots >= 1
		}
		add_district = {
			district_type = $district$
			ignore_cap = yes
		}
	}
	else_if = {
		limit = {
			free_district_slots <= 0
			planet_size < 25
		}
		set_variable = {
			which = needed_size
			value = 1
		}
		subtract_variable = {
			which = needed_size
			value = trigger:free_district_slots
		}
		change_planet_size = needed_size
		add_district = {
			district_type = $district$
			ignore_cap = yes
		}
	}
	#else do nothing
}

generate_start_buildings_and_districts_old = {
	optimize_memory
	if = {
		limit = {
			owner = {
				NOR = {
					has_origin = origin_shattered_ring
					has_origin = origin_broken_shackles
				}
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_servitor
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}

			if = {
				limit = { owner = { last_created_species = { is_lithoid = yes } }}
				owner = {
					set_country_flag = lithoid_subspecies
				}
			}
			else = {
				owner = {
					set_country_flag = non_lithoid_subspecies
				}
			}
		}

		if = {
			limit = {
				owner = {
					has_origin = origin_tree_of_life
					is_lithoid_empire = yes
				}
			}
			owner = {
				set_country_flag = non_lithoid_subspecies
			}
		}

		if = {
			limit = { owner = { is_regular_empire = yes } }

			# total - 24 jobs

			# 3 jobs
			if = {
				limit = { NOT = { owner = { has_origin = origin_payback } } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
			}

			if = {
				limit = {
					owner = {
						has_origin = origin_payback
						tec_is_agrarian_idyll_empire = yes
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}

			if = {
				limit = {
					owner = { tec_is_agrarian_idyll_empire = no }
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_city
					}
				}
			}
			else = {
				if = {
					limit = {
						owner = {
							is_lithoid_empire = yes
						}
					}
					while = {
						count = 2
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining
						}
					}
				}
				else = {
					while = {
						count = 2
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}
				}
			}

			if = {
				limit = { owner = { is_megacorp = yes } }
				add_district_and_planet_size_if_needed_effect = {
					district = district_city
				}
			}

			# 4 - 6 jobs
			if = {
				limit = {
					owner = {
						OR = {
							is_lithoid_empire = no
							has_country_flag = non_lithoid_subspecies
						}
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
				if = {
					limit = {
						NOT = { owner = { has_origin = origin_payback } }
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
			}
			else = {
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
				if = {
					limit = {
						NOT = { owner = { has_origin = origin_payback } }
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
			}

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
			if = {
				limit = {
					NOT = { owner = { has_origin = origin_payback } }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}

			# 4 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}
			if = {
				limit = {
					NOT = { owner = { has_origin = origin_payback } }
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_industrial
				}
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_megacorp = no
						NOT = { has_origin = origin_payback }
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						has_origin = origin_default
						is_eager_explorer_empire = no
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 3 jobs
			add_building = building_capital

			# 2 jobs
			if = {
				limit = {
					owner = {
						tec_is_aiauth_empire = yes
					}
				}
				add_building = building_tec_aiauth_1
			}
			else = {
				if = {
					limit = { owner = { is_spiritualist = no } }
					add_building = building_bureaucratic_1
				}
				# 2 jobs - temples
					if = {
						limit = {
							owner = {
								is_spiritualist = yes
								tec_is_death_cult = no
								tec_is_machine_cult = no
							} 
						}
						add_building = building_temple
					}
					if = {
						limit = {
							owner = {
								is_spiritualist = yes
								tec_is_machine_cult = yes
							} 
						}
						add_building = building_tec_mecha_temple_1
					}
					if = {
						limit = {
							owner = {
								is_spiritualist = yes
								tec_is_death_cult = yes
							} 
						}
						add_building = building_sacrificial_temple_1
					}
				# /
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				if = {
					limit = {
						owner = {
							tec_is_reanimator_empire = no
						}
					}
					add_building = building_research_lab_1
				}
				else = {
					add_building = building_dread_encampment
	
					solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
						while = {
							count = 2
							random_system_planet = {
								limit = {
									has_deposit_for = shipclass_research_station
									NOT = { has_deposit = d_engineering_6 }
								}
								clear_deposits = yes
								add_deposit = d_engineering_6
							}
						}
					}
				}
			}
			# 1 job
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_permanent_employment
					}
				}
				add_building = building_posthumous_employment_center
			}
			# 2 Jobs
			if = {
				limit = {
					owner = {
						NOT = {
							has_origin = origin_payback
						}
						has_valid_civic = civic_environmentalist
					}
				}
				add_building = building_ranger_lodge
				add_blocker = { type = d_big_nature_preserve_blocker }
			}
			# 4-5 jobs
			if = {
				limit = {
					owner = {
						NOT = { has_valid_civic = civic_agrarian_idyll }
					}
				}
				if = {
					limit = {
						owner = {
							is_spiritualist = no
							is_pleasure_seeker = yes
						}
					}
					add_building = building_holo_theatres
					add_district_and_planet_size_if_needed_effect = {
						district = district_industrial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_spiritualist = yes
							tec_is_death_cult = yes
						}
					}
					add_building = building_sacrificial_temple_1
					add_district_and_planet_size_if_needed_effect = {
						district = district_industrial
					}
				}
				else_if = {
					limit = {
						owner = {
							is_megacorp = no
							is_spiritualist = yes
						}
					}
					# 2 jobs - temples
						if = {
							limit = {
								owner = {
									is_spiritualist = yes
									tec_is_death_cult = no
									tec_is_machine_cult = no
								} 
							}
							add_building = building_temple
						}
						if = {
							limit = {
								owner = {
									is_spiritualist = yes
									tec_is_machine_cult = yes
								} 
							}
							add_building = building_tec_mecha_temple_1
						}
						if = {
							limit = {
								owner = {
									is_spiritualist = yes
									tec_is_death_cult = yes
								} 
							}
							add_building = building_sacrificial_temple_1
						}
					# /
					if = {
						limit = {
							owner = {
								is_anglers_empire = yes
								is_catalytic_empire = yes
							}
						}
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_industrial
						}
					}
				}
				else = {
					add_building = building_commercial_zone
				}
			}

		}

		if = {
			limit = { owner = { is_hive_empire = yes } }

			# 9 jobs
			while = {
				count = 3
				add_district_and_planet_size_if_needed_effect = {
					district = district_hive
				}
			}

			# 6-9 jobs
			if = {
				limit = { owner = { is_lithoid_empire = no } }
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
				}
			}
			else = {
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}
			}

			if = {
				limit = {
					owner = { has_origin = origin_tree_of_life }
				}
				remove_district = district_mining
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}

			# EVOLVED syncretic
			if = {
				limit = {
					owner = {
						is_hive_empire = yes
						has_origin = origin_syncretic_evolution
						has_country_flag = non_lithoid_subspecies
					}
				}
				while = {
					count = 1
					add_district_and_planet_size_if_needed_effect = {
						district = district_farming
					}
					remove_district = district_hive
				}
			}

			# 6 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 3 jobs
			if = {
				limit = {
					owner = {
						has_origin = origin_default
						is_eager_explorer_empire = no
					}
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_generator
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}

			# 5 jobs
			if = {
				limit = {
					owner = {
						tec_is_cyberhive = no
						tec_is_biohive = no
					}
				}
				add_building = building_hive_capital
			}

			if = {
				limit = {
					owner = {
						tec_is_cyberhive = yes
					}
				}
				add_building = building_tec_cyberhive_capital
			}

			if = {
				limit = {
					owner = {
						tec_is_biohive = yes
					}
				}
				add_building = building_tec_biohive_capital
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						OR = {
							AND = {
								has_origin = origin_necrophage
								has_valid_civic = civic_hive_devouring_swarm
							}
							NOT = { has_origin = origin_necrophage }
						}
					}
				}
				if = {
					limit = {
						owner = {
							tec_is_cyberhive = no
							tec_is_biohive = no
						}
					}
					add_building = building_hive_node
				}
	
				if = {
					limit = {
						owner = {
							tec_is_cyberhive = yes
						}
					}
					add_building = building_tec_cyberhive_node
				}
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			# 1 job
			if = {
				limit = {
					owner = {
						tec_hive_can_have_spawningpools = yes
						NOT = {
							has_origin = origin_mechanists
						}
						NAND = {
							has_origin = origin_necrophage
							has_valid_civic = civic_hive_devouring_swarm
						}
					}
				}
				if = {
					limit = {
						owner = {
							has_authority = auth_tec_hive_biological
						}
					}
					add_building = building_tec_biohive_spawning_pool_1
				}
				else = {
					add_building = building_spawning_pool
				}
			}

			if = {
				limit = {
					owner = { has_origin = origin_progenitor_hive }
				}
				add_building = building_offspring_nest
			}
		}

		# Replace capital building for machine empires
		if = {
			limit = { owner = { is_machine_empire = yes } }

			# total - 27 jobs

			# 3 jobs
			while = {
				count = 2
				add_district_and_planet_size_if_needed_effect = {
					district = district_nexus
				}
			}

			# 2 jobs
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}

			# 6 jobs
			add_building = building_machine_capital

			# 1 job
			if = {
				limit = {
					owner = {
						NOT = {
							has_valid_civic = civic_tec_machine_reimaginator_cluster
						}
					}
				}
				add_building = building_machine_assembly_plant
			}

			if = {
				limit = {
					owner = {
						has_valid_civic = civic_tec_machine_reimaginator_cluster
					}
					uses_district_set = standard
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_tec_machine_reimaginator_cluster
					}
					uses_district_set = machine_world
				}
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}
			# 2 job
			if = {
				limit = { owner = { NOT = { has_valid_civic = civic_machine_servitor } } }
				add_building = building_uplink_node
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			if = {
				limit = { owner = { NOT = { has_origin = origin_machine } }}

				# 4 jobs
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining
				}

				# 2 jobs
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}

				# 8 jobs
				while = {
					count = 4
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator
					}
				}

				# 2 jobs
				if = {
					limit = {
						owner = {
							has_origin = origin_default
							is_eager_explorer_empire = no
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator
					}
				}

				#Assimilators
				if = {
					limit = { owner = { has_civic = civic_machine_assimilator } }
					remove_district = district_generator

					if = {
						limit = { owner = { has_country_flag = lithoid_subspecies } }
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}
				}

				#Servitors
				if = {
					limit = { owner = { has_civic = civic_machine_servitor } }

					if = {
						limit = { owner = { has_country_flag = lithoid_subspecies } }
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining
						}
					}
					else = {
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}

					add_district_and_planet_size_if_needed_effect = {
						district = district_nexus
					}
					add_building = building_organic_sanctuary
				}
			}
			
			# Resource Consolidation
			else = {
				while = {
					count = 4
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator_uncapped
					}
				}

				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}

				#Assimilators
				if = {
					limit = { owner = { has_civic = civic_machine_assimilator } }
					add_deposit = d_organic_slurry
				}

				# Blocker that removes the extra machine world replicator jobs until removed
				add_deposit = d_resource_consolidation_1
			}
		}
		# Replace a mining district with a farming district for lithoid empires with an organic secondary species that use food for alloy production
		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					has_country_flag = non_lithoid_subspecies
					is_catalytic_empire = yes
				}
			}
			remove_district = district_mining
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
		}
		# Replace two mining districts with farming district for non-machine empires that use food for alloy production
		if = {
			limit = {
				owner = {
					NOT = { has_country_flag = non_lithoid_subspecies }
					NOT = { is_machine_empire = yes }
					is_catalytic_empire = yes
				}
			}
			while = {
				count = 2
				remove_district = district_mining
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming
				}
			}
		}
		# And machine empires swap a generator district for another farming district
		if = {
			limit = {
				owner = {
					is_machine_empire = yes
					is_catalytic_empire = yes
				}
			}
			remove_district = district_mining
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
			remove_district = district_generator
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
		}
		# Replace 1 generator district with 1 farming district for anglers civic on wet worlds
		if = {
			limit = {
				owner = {
					tec_is_aquatic_empire = yes
					is_lithoid_empire = no
					is_machine_empire = no
				}
				has_climate = wet
			}
			remove_district = district_generator
			add_district = district_farming
		}
		if = {
			limit = {
				owner = {
					tec_is_aquatic_empire = yes
					is_lithoid_empire = yes
					is_machine_empire = no
				}
				has_climate = wet
			}
			remove_district = district_generator
			add_district = district_mining
		}
		# Replace farming districts with uncapped ones for anglers civic on ocean worlds
		if = {
			limit = {
				owner = { is_anglers_empire = yes }
				is_planet_class = pc_ocean
			}
			while = {
				limit = { num_districts = { type = district_farming value > 0 } }
				remove_district = district_farming
				add_district_and_planet_size_if_needed_effect = {
					district = district_farming_uncapped
				}
			}
		}
		# Replace mining districts with uncapped ones for subterranean origin
		if = {
			limit = {
				owner = { is_subterranean_empire = yes }
			}
			while = {
				limit = { num_districts = { type = district_mining value > 0 } }
				remove_district = district_mining
				add_district_and_planet_size_if_needed_effect = {
					district = district_mining_uncapped
				}
			}
		}
		# Give Idyllic Bloom a Gaiaseeder to start with if they have room
		if = {
			limit = {
				owner = {
					tec_is_idyllic_bloom_empire = yes
					NOT = { has_origin = origin_life_seeded }
				}
				free_building_slots > 0
			}
			add_building = building_gaiaseeders_1
		}
	}

	if = {	# Shattered ring
		limit = {
			owner = {
				has_origin = origin_shattered_ring
			}
		}
		add_district_and_planet_size_if_needed_effect = {
			district = district_rw_industrial
		}
		add_district_and_planet_size_if_needed_effect = {
			district = district_tec_rw_replicator
		}
		add_deposit = d_segment_rubble_3
		add_deposit = d_segment_rubble_3
		add_district_and_planet_size_if_needed_effect = {
			district = district_rw_generator
		}
		add_deposit = d_segment_rubble_2
		add_deposit = d_segment_rubble_2
		add_district_and_planet_size_if_needed_effect = {
			district = district_rw_farming
		}
		add_deposit = d_segment_rubble_1
		add_deposit = d_segment_rubble_1

		add_deposit = d_arcane_generator
		# RP DEPOSITS
		add_deposit = d_tec_rw_minor_structural_damage
		add_deposit = d_tec_rw_major_structural_damage

		add_deposit = d_decrepit_tunnels_1
		add_deposit = d_decrepit_tunnels_2
		# add_deposit = d_decrepit_tunnels_3 # Commented cause causes districts to disappear

		if = {	# lithoids
			limit = {
				owner = {
					is_lithoid_empire = yes
					NOT = {
						has_civic = civic_hive_devouring_swarm 
					}
				}
			}
			while = {
				count = 4
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					has_civic = civic_hive_devouring_swarm
				}
			}
			while = {
				count = 2
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {	# Lithoids get double the mining districts
			limit = {
				owner = {
					is_lithoid_empire = yes
					any_owned_species = {
						NOR = {
							is_archetype = BIOLOGICAL
						}
					}
					is_catalytic_empire = no
				}
			}
			remove_district = district_rw_farming
			remove_deposit = d_segment_rubble_1
			remove_deposit = d_segment_rubble_1

			add_district_and_planet_size_if_needed_effect = {
				district = district_tec_rw_replicator
			}
			add_deposit = d_segment_rubble_3
			add_deposit = d_segment_rubble_3
		}

		if = {
			limit = { owner = { is_regular_empire = yes } }

				if = {
					limit = {
						owner = { is_megacorp = no }
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_rw_city
					}
				}
				if = {
					limit = {
						owner = { is_megacorp = yes }
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_tec_rw_trade
					}
				}

			# 3 jobs
			add_building = building_capital

			# 2 jobs
			if = {
				limit = {
					owner = {
						tec_is_aiauth_empire = yes
					}
				}
				add_building = building_tec_aiauth_1
			}
			else = {
				if = {
					limit = { owner = { is_spiritualist = no } }
					add_building = building_bureaucratic_1
				}
				# 2 jobs - temples
					if = {
						limit = {
							owner = {
								is_spiritualist = yes
								tec_is_death_cult = no
								tec_is_machine_cult = no
							} 
						}
						add_building = building_temple
					}
					if = {
						limit = {
							owner = {
								is_spiritualist = yes
								tec_is_machine_cult = yes
							} 
						}
						add_building = building_tec_mecha_temple_1
					}
					if = {
						limit = {
							owner = {
								is_spiritualist = yes
								tec_is_death_cult = yes
							} 
						}
						add_building = building_sacrificial_temple_1
					}
				# /
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						NOT = { has_valid_civic = civic_reanimated_armies }
					}
				}
				add_building = building_research_lab_1
			}
			else = {
				add_building = building_dread_encampment

				solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
					random_system_planet = {
						limit = {
							has_deposit_for = shipclass_research_station
							has_deposit = d_engineering_5
						}
						# Total size 15 deposit as the Irreparable Damage is normally a size 5 and non-Shattered Ring starts get an additional two size 6 deposits.
						add_deposit = d_engineering_10
					}
				}
			}

			if = {
				limit = {
					owner = {
						has_valid_civic = civic_permanent_employment
					}
				}
				add_building = building_posthumous_employment_center
			}

			# 5 jobs
			if = {
				limit = { owner = { is_megacorp = yes } }
				add_building = building_commercial_zone
			}
		}

		if = {
			limit = { owner = { is_hive_empire = yes } }

			add_district_and_planet_size_if_needed_effect = {
				district = district_rw_hive
			}

			# 5 jobs
			if = {
				limit = {
					owner = {
						tec_is_cyberhive = no
						tec_is_biohive = no
					}
				}
				add_building = building_hive_capital
			}

			if = {
				limit = {
					owner = {
						tec_is_cyberhive = yes
					}
				}
				add_building = building_tec_cyberhive_capital
			}

			if = {
				limit = {
					owner = {
						tec_is_biohive = yes
					}
				}
				add_building = building_tec_biohive_capital
			}

			# 2 jobs
			add_building = building_hive_node

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			# 1 job
			if = {
				limit = {
					owner = {
						tec_hive_can_have_spawningpools = yes
						NOT = {
							has_origin = origin_mechanists
						}
						NAND = {
							has_origin = origin_necrophage
							has_valid_civic = civic_hive_devouring_swarm
						}
					}
				}
				if = {
					limit = {
						owner = {
							has_authority = auth_tec_hive_biological
						}
					}
					add_building = building_tec_biohive_spawning_pool_1
				}
				else = {
					add_building = building_spawning_pool
				}
			}

			if = {
				limit = {
					owner = { has_origin = origin_progenitor_hive }
				}
				add_building = building_offspring_nest
			}

			# 1 job
			add_building = building_hive_warren
		}

		# Replace capital building for machine empires
		if = {
			limit = {
				owner = {
					is_machine_empire = yes 
				}
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_rw_nexus
			}

			# 6 jobs
			add_building = building_machine_capital

			# 2 job
			if = {
				limit = {
					owner = {
						NOT = {
							has_civic = civic_machine_servitor 
						}
					}
				}
				add_building = building_uplink_node
			}

			# 2 jobs
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				add_building = building_research_lab_1
			}

			#Servitors
			if = {
				limit = {
					owner = {
						has_civic = civic_machine_servitor 
					}
				}
				add_building = building_organic_sanctuary
			}

			if = {
				limit = {
					owner = {
						NOT = {
							has_valid_civic = civic_tec_machine_reimaginator_cluster
						}
					}
				}
				add_building = building_machine_assembly_plant
			}

			if = {
				limit = {
					owner = {
						OR = {
							NOR = {
								has_valid_civic = civic_machine_servitor
								has_valid_civic = civic_machine_assimilator
								has_valid_civic = civic_tec_machine_promethean
							}
							any_owned_species = {
								has_trait = trait_lithoid
							}
						}
					}
				}
				if = {
					limit = {
						owner = {
							is_catalytic_empire = no
						}
					}
					remove_district = district_rw_farming
					remove_deposit = d_segment_rubble_1
					remove_deposit = d_segment_rubble_1

					add_district_and_planet_size_if_needed_effect = {
						district = district_rw_generator
					}
					add_deposit = d_segment_rubble_2
					add_deposit = d_segment_rubble_2
				}
				
			}
		}
	}

	if = {	# Broken Shackles
		limit = {
			owner = {
				has_origin = origin_broken_shackles
			}
		}
		while = {
			count = 6
			add_district_and_planet_size_if_needed_effect = {
				district = district_crashed_slaver_ship
			}
		}
		add_building = building_low_tech_farm
		add_building = building_low_tech_scrap_refinery
		add_building = building_low_tech_admin_hub
		add_building = building_low_tech_power_plant
		add_building = building_low_tech_capital
		add_building = building_low_tech_research_lab
	}

	if = {	# Payback
		limit = {
			owner = {
				has_origin = origin_payback
			}
		}
		# We want a clean slate building-wise, but to keep the districts.
		remove_all_buildings = yes
		add_planet_devastation = 33
		add_modifier = {
			modifier = payback_debris_field
		}
		add_modifier = {
			modifier = payback_unified_purpose
			days = 7200
		}
		while = {
			count = 6
			add_deposit = d_ship_debris_payback_blocker
		}
		# 3 jobs
		add_building = building_capital
		add_building = building_clinic
		add_building = building_research_lab_1
		add_building = building_mineral_purification_plant
		add_building = building_energy_grid
	}

	if = {	# Relentless
		limit = {
			owner = {
				is_relentless_industrialist_empire = yes
			}
			free_building_slots > 0
		}
		add_building = building_coordinated_fulfillment_center_1
	}

	if = {	# Archaeotech review balance
		limit = {
			owner = {
				has_origin = origin_remnants
				has_ancrel = yes
			}
		}
		owner = {
			give_technology = {
				tech = tech_archaeostudies
				message = no
			}
		}
		remove_building = building_research_lab_1
		add_building = building_archaeostudies_faculty
	}

	# Additional resources based on empire type and possible subspecies
	owner = {
		if = {
			limit = {
				is_machine_empire = yes
			}
			if = {
				limit = {
					OR = {
						has_valid_civic = civic_machine_servitor
						has_valid_civic = civic_machine_assimilator
					}
				}
				if = {
					limit = { has_country_flag = lithoid_subspecies }
					add_resource = { minerals = 100	}
					add_resource = { energy = 100 }
				}
				else = {
					add_resource = { food = 100	}
					add_resource = { energy = 100 }
				}
			}
			else = {
				add_resource = { energy = 200 }
			}
		}
		else = {
			if = {
				limit = { is_lithoid_empire = no }
				if = {
					limit = { has_country_flag = lithoid_subspecies }
					add_resource = { food = 100	}
					add_resource = { minerals = 100 }
				}
				else = {
					add_resource = { food = 200 }
				}
			}
			else = {
				if = {
					limit = { has_country_flag = non_lithoid_subspecies }
					add_resource = { food = 100	}
					add_resource = { minerals = 100 }
				}
				else = {
					add_resource = { minerals = 200 }
				}
			}
		}
	}
}

generate_start_buildings_and_districts = {

	optimize_memory
	if = {
		limit = {
			owner = {
				NOR = {
					has_origin = origin_shattered_ring
					has_origin = origin_broken_shackles
				}
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_servitor
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}

			if = {
				limit = { owner = { last_created_species = { is_lithoid = yes } }}
				owner = {
					set_country_flag = lithoid_subspecies
				}
			}
			else = {
				owner = {
					set_country_flag = non_lithoid_subspecies
				}
			}
		}

		if = {
			limit = {
				owner = {
					has_origin = origin_tree_of_life
					is_lithoid_empire = yes
				}
			}
			owner = {
				set_country_flag = non_lithoid_subspecies
			}
		}

		# total - 24 jobs

		# 3 jobs - EVOLVED NOTE - city and swaps

		while = {
			count = value:tec_start_city_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}


		# 4 - 6 jobs - EVOLVED NOTE - farming and swaps
		while = {
			count = value:tec_start_farming_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
		}

		# 4 jobs - EVOLVED NOTE - mining and swaps 
		while = {
			count = value:tec_start_mining_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
		}

		# 2 jobs - EVOLVED NOTE - generator and swaps 
		while = {
			count = value:tec_start_generator_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}
		}

		# 4 jobs - EVOLVED NOTE - industrial and swaps 
		while = {
			count = value:tec_start_industrial_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}
		}

		# 3 jobs - EVOLVED NOTE - Capital
		tec_start_add_capital = yes

		# 2 jobs - EVOLVED NOTE - unity
		tec_start_add_unity_building = yes

		# 2 jobs - EVOLVED NOTE - research
		if = {
			limit = {
				owner = {
					is_low_tech_start = no
				}
			}
			tec_start_add_research_building = yes
		}
		# 1-2 job - EVOLVED NOTE - aux - moved at end
		# 4-5 jobs - EVOLVED NOTE - amenities - ANOTHER NOTE - INDUSTRIAL and FOOD adds moved to district logic
		if = {
			limit = {
				owner = {
					tec_is_agrarian_idyll_empire = no
				}
			}
			tec_start_add_amenities_building = yes
		}
	}

	if = {	# Shattered ring
		limit = {
			owner = {
				has_origin = origin_shattered_ring
			}
		}
		add_district_and_planet_size_if_needed_effect = {
			district = district_rw_industrial
		}
		add_district_and_planet_size_if_needed_effect = {
			district = district_tec_rw_replicator
		}
		add_deposit = d_segment_rubble_3
		add_deposit = d_segment_rubble_3
		add_district_and_planet_size_if_needed_effect = {
			district = district_rw_generator
		}
		add_deposit = d_segment_rubble_2
		add_deposit = d_segment_rubble_2
		add_district_and_planet_size_if_needed_effect = {
			district = district_rw_farming
		}
		add_deposit = d_segment_rubble_1
		add_deposit = d_segment_rubble_1

		add_deposit = d_arcane_generator
		# RP DEPOSITS
		add_deposit = d_tec_rw_minor_structural_damage
		add_deposit = d_tec_rw_major_structural_damage

		add_deposit = d_decrepit_tunnels_1
		add_deposit = d_decrepit_tunnels_2
		# add_deposit = d_decrepit_tunnels_3 # Commented cause causes districts to disappear

		if = {	# lithoids
			limit = {
				owner = {
					is_lithoid_empire = yes
					NOT = {
						has_civic = civic_hive_devouring_swarm 
					}
				}
			}
			while = {
				count = 4
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					has_civic = civic_hive_devouring_swarm
				}
			}
			while = {
				count = 2
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {	# Lithoids get double the mining districts
			limit = {
				owner = {
					is_lithoid_empire = yes
					any_owned_species = {
						NOR = {
							is_archetype = BIOLOGICAL
						}
					}
					is_catalytic_empire = no
				}
			}
			remove_district = district_rw_farming
			remove_deposit = d_segment_rubble_1
			remove_deposit = d_segment_rubble_1

			add_district_and_planet_size_if_needed_effect = {
				district = district_tec_rw_replicator
			}
			add_deposit = d_segment_rubble_3
			add_deposit = d_segment_rubble_3
		}

		# city - will swap
		add_district_and_planet_size_if_needed_effect = {
			district = district_rw_city
		}

		# 3 jobs - EVOLVED NOTE - Capital
		tec_start_add_capital = yes

		# 2 jobs - EVOLVED NOTE - unity
		tec_start_add_unity_building = yes

		# 2 jobs - EVOLVED NOTE - research
		if = {
			limit = {
				owner = {
					is_low_tech_start = no
				}
			}
			tec_start_add_research_building = yes
		}
		# 1-2 job - EVOLVED NOTE - aux - moved at end
		# 4-5 jobs - EVOLVED NOTE - amenities - ANOTHER NOTE - INDUSTRIAL and FOOD adds moved to district logic
		if = {
			limit = {
				owner = {
					tec_is_agrarian_idyll_empire = no
				}
			}
			tec_start_add_amenities_building = yes
		}

		# Replace capital building for machine empires
		if = {
			limit = {
				owner = {
					is_machine_empire = yes 
				}
			}

			if = {
				limit = {
					owner = {
						OR = {
							NOR = {
								has_valid_civic = civic_machine_servitor
								has_valid_civic = civic_machine_assimilator
								has_valid_civic = civic_tec_machine_promethean
							}
							
							any_owned_species = {
								has_trait = trait_lithoid
							}
						}
					}
				}
				if = {
					limit = {
						owner = {
							is_catalytic_empire = no
						}
					}
					remove_district = district_rw_farming
					remove_deposit = d_segment_rubble_1
					remove_deposit = d_segment_rubble_1

					add_district_and_planet_size_if_needed_effect = {
						district = district_rw_generator
					}
					add_deposit = d_segment_rubble_2
					add_deposit = d_segment_rubble_2
				}
				
			}
		}
	}

	if = {	# Broken Shackles
		limit = {
			owner = {
				has_origin = origin_broken_shackles
			}
		}

		while = {
			count = 6
			add_district_and_planet_size_if_needed_effect = {
				district = district_crashed_slaver_ship
			}
		}
		add_building = building_low_tech_farm
		add_building = building_low_tech_scrap_refinery
		add_building = building_low_tech_admin_hub
		add_building = building_low_tech_power_plant
		add_building = building_low_tech_capital
		add_building = building_low_tech_research_lab

		if = {
			limit = {
				free_district_slots < 2
			}
			change_planet_size = 2
		}
	}

	if = {	# Payback
		limit = {
			owner = {
				has_origin = origin_payback
			}
		}
		# We want a clean slate building-wise, but to keep the districts.
		remove_all_buildings = yes
		add_planet_devastation = 33
		add_modifier = {
			modifier = payback_debris_field
		}
		add_modifier = {
			modifier = payback_unified_purpose
			days = 7200
		}
		while = {
			count = 6
			add_deposit = d_ship_debris_payback_blocker
		}
		# 3 jobs
		add_building = building_capital
		add_building = building_clinic
		add_building = building_research_lab_1
		add_building = building_mineral_purification_plant
		add_building = building_energy_grid
	}

	# Moved aux buildings at end
	
	tec_start_add_assembly_building = yes
	tec_start_add_aux_building = yes 

	# Additional resources based on empire type and possible subspecies
	owner = {
		give_starting_resources_effect = yes
	}
}

generate_start_pops_old = {
	if = {
		limit = {
			owner = {
				OR = {
					# vanilla
					has_origin = origin_syncretic_evolution
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator

					# modded
					has_origin = origin_tec_slavetothesystem
				}
			}
		}

		if = {
			limit = {
				last_created_species = {
					is_species_class = MACHINE 
				}
			}
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = {
				save_event_target_as = last_created_species 
			}
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}
			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_syncretic_evolution
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				save_event_target_as = syncretic_species
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_syncretic_evolution
						}
					}
					# if = {
					# 	limit = {
					# 		prev.owner = {
					# 			is_hive_empire = yes
					# 			NOT = {
					# 				has_ethic = ethic_gestalt_empathy
					# 			}
					# 		}
					# 	}
					# 	modify_species = {
					# 		species = event_target:syncretic_species
					# 		add_trait = trait_hive_mind
					# 		add_traits_at_start_of_list = yes
					# 		change_scoped_species = no
					# 		effect = {
					# 			set_species_flag = syncretic_species@root.owner
					# 			save_event_target_as = syncretic_species
					# 			set_citizenship_type = {
					# 				country = root.owner
					# 				type = citizenship_full
					# 			}
					# 			set_living_standard = {
					# 				country = root.owner
					# 				type = living_standard_hive_mind
					# 			}
					# 		}
					# 	}
					# }
					if = {
						limit = {
							prev.owner = {
								has_valid_civic = civic_tec_origin_elders
							}
						}
						modify_species = {
							species = event_target:syncretic_species
							remove_trait = trait_syncretic_proles
							add_trait = @trait_tec_se_subspecies
							effect = {
								set_species_flag = syncretic_species@root.owner
								save_event_target_as = syncretic_species
							}
						}
					}
					else = {
						set_citizenship_type = {
							country = root.owner
							type = citizenship_slavery
						}
					}
				}
			}
			
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
				while = {
					count = 6
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else_if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
				while = {
					count = 9
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else = {
				while = {
					count = 12
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
		}

		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor 
				}
			}
			last_created_species = {
				set_species_flag = tec_original_biotrophy_@root.owner
				set_citizenship_type = {
					country = root.owner
					type = citizenship_organic_trophy
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_organic_trophy
				}
			}
			while = {
				count = 5
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}

		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_assimilator 
				}
			}
			last_created_species = {
				set_species_flag = cyborg_assimilated@root.owner
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full_machine
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
			}
			while = {
				count = 10
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
			owner = {
				country_event = {
					id = syndaw.1
					days = 1
				}
			}
		}

			#if = {
				#	limit = {
				#		owner = {
				#			has_origin = origin_tec_slavetothesystem
				#		}
				#	}
				#	last_created_species = {
				#		set_species_flag = cyborg_slaves@root.owner
				#		set_citizenship_type = {
				#			country = root.owner
				#			type = citizenship_slavery
				#		}
				#		set_living_standard = {
				#			country = root.owner
				#			type = living_standard_normal
				#		}
				#	}
				#	while = {
				#		count = 22
				#		create_pop = {
				#			species = last_created_species
				#			ethos = random
				#		}
				#	}
				#	while = {
				#		while = {
				#			limit = {
				#				num_pops > 8
				#				has_trait = trait_mechanical
				#			}
				#			random_owned_pop = {
				#				limit = {
				#					NOR = {
				#						is_pop_category = ruler
				#						is_pop_category = specialist
				#					}
				#				}
				#				kill_pop = yes 
				#			}
				#		}
				#	}
			#}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_mechanists
			}
		}
		owner = {
			tec_create_built_robot_species = yes
			set_country_flag = done_first_robot
		}
		while = {
			count = 10
			create_pop = {
				species = last_created_species
			}
		}
		every_owned_pop = {
			limit = {
				OR = {
					has_job = miner
					has_job = tec_reef_miner
					has_job = mining_drone
					has_job = tec_reef_drone
				}
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_power_drills
				add_trait = trait_robot_bulky
				add_traits_at_start_of_list = yes
			}
		}
		every_owned_pop = {
			limit = {
				OR = {
					has_job = farmer
					has_job = angler
					has_job = agri_drone
					has_job = tec_aqua_drone
				}
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_harvesters
				add_trait = trait_robot_bulky
				add_traits_at_start_of_list = yes
			}
		}
		every_owned_pop = {
			limit = {
				OR = {
					has_job = technician
					has_job = technician_drone
					has_job = tec_thermogenerator_drone
				}
				is_robotic_species = yes
			}
			modify_species = {
				species = this
				add_trait = trait_robot_superconductive
				add_trait = trait_robot_bulky
				add_traits_at_start_of_list = yes
			}
		}
		every_owned_pop = {
			limit = {
				is_robotic_species = yes
				NOT = { has_trait = trait_robot_bulky }
			}
			modify_species = {
				species = this
				add_trait = trait_robot_bulky
				add_traits_at_start_of_list = yes
			}
		}
		every_owned_pop = {
			limit = {
				is_robotic_species = yes
			}
			set_citizenship_type = { 
				country = root.owner
				type = citizenship_robot_servitude
			}
			set_living_standard = {
				country = root.owner
				type = living_standard_servitude
			}
		}
		if = {
			limit = {
				exists = owner
				owner = {
					is_gestalt = no
				}
			}
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_tec_regular_machine_cult 
					}
				}
				add_building = building_mecha_monastery_1
			}
	
			if = {
				limit = {
					owner = {
						NOT = {
							has_valid_civic = civic_tec_regular_machine_cult
						}
					}
				}
				add_building = building_robot_assembly_plant
			}
		}
		else = {
			add_building = building_hive_robot_assembly_plant
		}

		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}

		while = {
			limit = { num_pops < 30 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = {
					has_civic = civic_fanatic_purifiers 
					has_civic = civic_hive_devouring_swarm
				} #purges them instead
			}
		}
		if = {
			limit = {
				owner = {
					has_valid_civic = civic_agrarian_idyll 
				} # Needs an extra building slot
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}
		add_building = building_necrophage_elevation_chamber
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm #purges them instead
				is_lithoid_empire = no
			}
		}
		add_building = building_spawning_pool
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				has_valid_civic = civic_hive_devouring_swarm
				is_lithoid_empire = yes
			}
		}
		add_district_and_planet_size_if_needed_effect = { district = district_mining }
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		while = {
			count = 2
			add_building = building_clone_army_clone_vat
		}
		planet_event = {
			id = clones.10
			days = 1095
			random = 730
		}
	}

	if = {
		limit = {
			owner = {
				is_hive_empire = yes 
			}
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	if = {
		limit = {
			owner = {
				has_valid_civic = civic_machine_servitor 
			}
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	if = {
		limit = {
			owner = {
				is_megacorp = yes
				has_reduced_pop_origin = no
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	if = {
		limit = {
			owner = { has_origin = origin_broken_shackles }
			num_pops < 6
		}

		while = {
			limit = { num_pops < 6 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	if = {
		limit = {
			owner = {
				owner = {
					is_regular_empire = yes
					has_reduced_pop_origin = no
				}
			}
		}
		while = {
			limit = {
				num_pops < 28 
			}
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_payback }
			num_pops < 18
		}
		while = {
			limit = { num_pops < 18 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_fear_of_the_dark }
		}
		while = {
			count = 20
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
		while = { #to make them start without resource deficits
			count = 2
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_default 
			}
		}
		while = {
			count = 4
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = yes
			}
		}
		while = {
			count = 10
			random_owned_pop = {
				limit = {
					is_same_species = root.owner.species
				}
				kill_pop = yes
			}
		}
	}
	if = {
		limit = {
			owner = {
				tec_is_zombie_empire = yes
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}
}

generate_start_pops = {
	if = {
		limit = {
			owner = {
				check_variable_arithmetic = {
					which = value:tec_start_pops_secondary_count
					value > 0
				}
			}
		}

		if = {
			limit = {
				last_created_species = {
					is_species_class = MACHINE 
				}
			}
			tec_start_handle_machine_species = yes
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}
			tec_start_handle_syncretic_species = yes
		}

		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor 
				}
			}
			tec_start_handle_biothrophy_species = yes
		}

		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_assimilator 
				}
			}
			tec_start_handle_assimilator_species = yes
			owner = {
				country_event = {
					id = syndaw.1
					days = 1
				}
			}
		}

			#if = {
				#	limit = {
				#		owner = {
				#			has_origin = origin_tec_slavetothesystem
				#		}
				#	}
				#	last_created_species = {
				#		set_species_flag = cyborg_slaves@root.owner
				#		set_citizenship_type = {
				#			country = root.owner
				#			type = citizenship_slavery
				#		}
				#		set_living_standard = {
				#			country = root.owner
				#			type = living_standard_normal
				#		}
				#	}
				#	while = {
				#		count = 22
				#		create_pop = {
				#			species = last_created_species
				#			ethos = random
				#		}
				#	}
				#	while = {
				#		while = {
				#			limit = {
				#				num_pops > 8
				#				has_trait = trait_mechanical
				#			}
				#			random_owned_pop = {
				#				limit = {
				#					NOR = {
				#						is_pop_category = ruler
				#						is_pop_category = specialist
				#					}
				#				}
				#				kill_pop = yes 
				#			}
				#		}
				#	}
			#}

		while = {
			count = owner.value:tec_start_pops_secondary_count
			create_pop = {
				species = event_target:tec_last_created_species
				ethos = random
			}
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_mechanists
			}
		}
		tec_start_handle_mechanists = yes
	}

	while = {
		limit = { num_pops < owner.value:tec_start_pops_count }
		create_pop = {
			species = owner_main_species
			ethos = random
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		planet_event = { id = clones.10 days = 1095 random = 720 }
	}

	if = {
		limit = {
			owner = {
				tec_is_zombie_empire = yes
			}
		}
		tec_start_handle_zombies = yes
	}
}

void_dweller_home_planet_setup = {	# Caelum
	optimize_memory
	set_planet_flag = habitat_level_2
	set_planet_flag = advanced_habitat
	owner = {
		save_event_target_as = void_dweller_owner
	}
	solar_system = { # Generates the orbitals
		random_system_planet = {
			limit = { has_planet_flag = habitat_1_planet }
			save_event_target_as = habitat_1_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_1_planet
			coords_from = event_target:habitat_1_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_2_planet }
			save_event_target_as = habitat_2_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_2_planet
			coords_from = event_target:habitat_2_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_3_planet }
			save_event_target_as = habitat_3_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_3_planet
			coords_from = event_target:habitat_3_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		every_system_planet = {
			limit = { has_planet_flag = mining_planet }
			create_mining_station = { owner = event_target:void_dweller_owner }
		}

		# Change starting pre-scripted ideal into inhabitable worlds
		# First pre-sripted is a research system
		closest_system = {
			limit = { has_star_flag = neighbor_t1_first_colony }
			set_star_flag = ideal_habitat_t1
			max_steps = 3
			random_system_planet = {
				limit = {
					is_colonizable = yes
					is_colony = no
					has_planet_flag = prescripted_ideal
				}
				change_pc = pc_frozen
				set_deposit = d_engineering_3
			}
			while = {
				count = 3
				random_system_planet = {
					limit = {
						is_star = no
						has_deposit = no
						has_anomaly = no
					}
					random_list = {
						5 = { set_deposit = d_physics_1 }
						5 = { set_deposit = d_society_1 }
						5 = { set_deposit = d_engineering_1 }
						1 = { set_deposit = d_physics_2 }
						1 = { set_deposit = d_society_2 }
						1 = { set_deposit = d_engineering_2 }
					}
				}
			}
		}
		# Second pre-sripted is a resource system
		closest_system = {
			limit = { has_star_flag = neighbor_t2_second_colony }
			set_star_flag = ideal_habitat_t2
			max_steps = 6
			random_system_planet = {
				limit = {
					is_colonizable = yes
					is_colony = no
					has_planet_flag = prescripted_ideal
				}
				remove_planet_flag = prescripted_ideal
				change_pc = pc_molten
				set_deposit = d_alloys_3
				add_deposit = d_minerals_4
			}
			while = {
				count = 3
				random_system_planet = {
					limit = {
						is_star = no
						has_deposit = no
						has_anomaly = no
					}
					random_list = {
						5 = { set_deposit = d_minerals_1 }
						5 = { set_deposit = d_energy_1 }
						1 = { set_deposit = d_minerals_2 }
						1 = { set_deposit = d_energy_2 }
					}
				}
			}
		}
	}
	owner = {
		give_starting_resources_effect = yes
		give_technology = {
			tech = tech_habitat_1
			message = no
		}
		add_research_option = tech_habitat_2

		if = {
			limit = {
				OR = {
					is_lithoid_empire = no
					OR = {
						is_machine_empire = no
						is_catalytic_empire = yes
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_servitor
					}
				}
			}
			give_technology = {
				tech = tech_eco_simulation
				message = no
			}
			give_technology = {
				tech = tech_hydroponics
				message = no
			}
			#Note: removed this as those serve a diff purpose in evolved
			#root.solar_system.starbase = {
			#	remove_starbase_building = {
			#		slot = 1
			#	}
			#	set_starbase_building = {
			#		slot = 1
			#		building = hydroponics_bay
			#	}
			#}
		}
		else = {
			give_technology = {
				tech = tech_powered_exoskeletons
				message = no
			}
			give_technology = {
				tech = tech_space_mining_1
				message = no
			}
			#Note: removed this as those serve a diff purpose in evolved
			#root.solar_system.starbase = {
			#	remove_starbase_building = {
			#		slot = 1
			#	}
			#	set_starbase_building = {
			#		slot = 1
			#		building = mining_bay
			#	}
			#}
		}
		if = {
			limit = {
				has_valid_civic = civic_private_healthcare_corporate
			}
			give_technology = { message = no tech = tech_frontier_health }
			add_research_option = tech_subdermal_stimulation
		}
	}
	#tec_start_hab_pops_spawn = {
	#	count = 10
	#	eager_count = 6
	#}
	# Distributing pops
		#if = {
		#	limit = {
		#		is_eager_explorer_empire = yes
		#	}
		#	set_variable = {
		#		which = tec_starting_pops_mult
		#		value = 0.65
		#	}
		#}
		#else = {	
		#	set_variable = {
		#		which = tec_starting_pops_mult
		#		value = 1
		#	}
		#}
		# Secondary Species
			if = {
				limit = {
					owner = {
						OR = {
							has_valid_civic = civic_machine_servitor
							has_valid_civic = civic_machine_assimilator
						}
					}
				}
				if = {
					limit = {
						owner = {
							has_valid_civic = civic_machine_servitor
						}
					}
					last_created_species = {
						modify_species = {
							species = this
							change_scoped_species = no
							ideal_planet_class = pc_habitat
							add_traits_at_start_of_list = yes
							add_trait = trait_void_dweller_1
							effect = {
								set_species_flag = tec_original_biotrophy_@root.owner
								tec_save_last_species = yes
								set_citizenship_type = {
									country = root.owner
									type = citizenship_organic_trophy
								}
								set_living_standard = {
									country = root.owner
									type = living_standard_organic_trophy
								}
							}
						}
					}
					#if = {
						#	limit = {
						#		owner = {
						#			is_eager_explorer_empire = no
						#		}
						#	}
						#	# 28 > 10
						#	while = {
						#		count = 10
						#		create_pop = {
						#			species = event_target:tec_last_created_species
						#			ethos = random
						#		}
						#		last_created_pop = {
						#			clear_ethos = yes
						#		}
						#	}
						#}
						#else = {
						#	# 18 > 6
						#	while = {
						#		count = 6
						#		create_pop = {
						#			species = event_target:tec_last_created_species
						#			ethos = random
						#		}
						#		last_created_pop = {
						#			clear_ethos = yes
						#		}
						#	}
					#}
				}
		
				if = {
					limit = {
						owner = {
							has_valid_civic = civic_machine_assimilator
						}
					}
					last_created_species = {
						modify_species = {
							species = this
							change_scoped_species = no
							ideal_planet_class = pc_habitat
							add_traits_at_start_of_list = yes
							add_trait = trait_void_dweller_1
							effect = {
								set_species_flag = cyborg_assimilated@root.owner
								tec_save_last_species = yes
								set_citizenship_type = {
									country = root.owner
									type = citizenship_full_machine
								}
								set_living_standard = {
									country = root.owner
									type = living_standard_hive_mind
								}
							}
						}
					}
				}
			}

			# Add support for other things like syncretic
			while = {
				count = owner.value:tec_start_pops_secondary_count
				create_pop = {
					species = event_target:tec_last_created_species
					ethos = random
				}
			}
		# /
		# Main species
			while = {
				limit = { num_pops < owner.value:tec_start_pops_count }
				create_pop = {
					species = owner_main_species
					ethos = random
				}
			}
		# /
		# Secondary species

		# /
	# /

	if = {
		limit = {
			owner = {
				has_valid_civic = civic_permanent_employment
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = tec_reef_miner
						has_job = farmer
						has_job = angler
						# Gestalt
						has_job = maintenance_drone
						has_job = technician_drone
						has_job = mining_drone
						has_job = tec_reef_drone
						has_job = agri_drone
						has_job = tec_aqua_drone
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}
				}
			}
		}
	}

	set_planet_entity = {
		entity = "habitat_phase_03_entity"
		graphical_culture = owner
	}
	set_planet_size = 6

	#deposit
	add_deposit = d_tec_arcane_replicator
	add_deposit = d_tec_minor_arcane_replicator

	# Districts
	while = {
		count = 2
		add_district = {
			district_type = district_hab_housing
			ignore_cap = yes
		}
	}
	add_district = {
		district_type = district_hab_industrial
		ignore_cap = yes
	}
	while = {
		count = 2
		add_district = {
			district_type = district_hab_mining
			ignore_cap = yes
		}
	}
	add_district = {
		district_type = district_hab_energy
		ignore_cap = yes
	}
	if = {
		limit = {
			owner = {
				is_catalytic_empire = no
			}
		}
		set_planet_flag = mining_habitat
		add_district = district_hab_mining
	}
	else = {
		set_planet_flag = tec_food_habitat
		add_district = district_tec_hab_food
	}
	#buildings
	tec_start_add_major_habitat_capital = yes
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = no
			}
		}
		add_district = {
			district_type = district_hab_science
			ignore_cap = yes
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					is_lithoid_empire = no
					is_catalytic_empire = yes
				}
			}
		}
		add_building = building_hydroponics_farm
	}
	
	tec_start_add_unity_building = yes
	tec_start_add_amenities_building = yes
	tec_start_add_assembly_building = yes

	tec_start_hab_try_add_aux = yes

	tec_start_hab_aquatic_flood_effect = yes
	validate_and_repair_planet_buildings_and_districts = yes
	# Cache triggers
	owner = { 
		every_owned_planet = {
			tec_cache_planet_type_triggers = yes
			tec_cache_capital_triggers = yes
		}
	}
}

OLD_void_dweller_home_planet_setup = {
	owner = {
		give_starting_resources_effect = yes
		save_event_target_as = void_dweller_owner
		give_technology = {
			tech = tech_habitat_1
			message = no
		}
		add_research_option = tech_habitat_2

		if = {
			limit = {
				is_lithoid_empire = no
				OR = {
					is_machine_empire = no
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_servitor
				}
			}
			give_technology = {
				tech = tech_eco_simulation
				message = no
			}
			give_technology = {
				tech = tech_hydroponics
				message = no
			}
		}
		else = {
			give_technology = {
				tech = tech_powered_exoskeletons
				message = no
			}
			give_technology = {
				tech = tech_space_mining_1
				message = no
			}
		}
		if = {
			limit = {
				has_valid_civic = civic_private_healthcare_corporate
			}
			give_technology = { message = no tech = tech_frontier_health }
			add_research_option = tech_subdermal_stimulation
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			last_created_species = {
				modify_species = {
					species = this
					change_scoped_species = no
					ideal_planet_class = pc_habitat
					add_traits_at_start_of_list = yes
					add_trait = trait_void_dweller_1
					effect = {
						set_species_flag = tec_original_biotrophy_@root.owner
						tec_save_last_species = yes
						set_citizenship_type = {
							country = root.owner
							type = citizenship_organic_trophy
						}
						set_living_standard = {
							country = root.owner
							type = living_standard_organic_trophy
						}
					}
				}
			}
			while = {
				count = 4
				create_pop = {
					species = event_target:tec_last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}

		}

		if = {
			limit = { owner = { has_valid_civic = civic_machine_assimilator } }
			last_created_species = {
				modify_species = {
					species = this
					change_scoped_species = no
					ideal_planet_class = pc_habitat
					add_traits_at_start_of_list = yes
					add_trait = trait_void_dweller_1
					effect = {
						set_species_flag = cyborg_assimilated@root.owner
						tec_save_last_species = yes
						set_citizenship_type = {
							country = root.owner
							type = citizenship_full_machine
						}
						set_living_standard = {
							country = root.owner
							type = living_standard_hive_mind
						}
					}
				}
			}
		}
	}

	tec_start_hab_pops_spawn = {
		count = 10
		eager_count = 6
	}


	solar_system = {
		# Regular empires
		# Capital habitat
		random_system_planet = {
			limit = {
				has_planet_flag = void_dweller_habitat_1
			}
			set_planet_entity = {
				entity = "habitat_phase_03_entity"
				graphical_culture = event_target:void_dweller_owner
			}
			set_planet_flag = advanced_habitat
			set_planet_size = 6

			#deposit
			add_deposit = d_tec_arcane_replicator
			add_deposit = d_tec_minor_arcane_replicator
			
			# districts
			add_district = district_hab_housing
			add_district = district_hab_industrial
			add_district = district_hab_industrial

			#buildings
			tec_start_add_major_habitat_capital = yes
			
			if = {
				limit = {
					owner = {
						is_low_tech_start = no
					}
				}
				tec_start_add_research_building = yes
			}

			tec_start_add_unity_building = yes
			tec_start_add_amenities_building = yes
			tec_start_add_assembly_building = yes

			tec_start_hab_try_add_aux = yes

			tec_start_hab_aquatic_flood_effect = yes
			validate_and_repair_planet_buildings_and_districts = yes
		}

		random_system_planet = {
			limit = {
				has_planet_flag = void_dweller_habitat_2
			}
			set_planet_entity = {
				entity = "habitat_phase_02_entity"
				graphical_culture = event_target:void_dweller_owner
			}
			set_planet_flag = advanced_habitat
			set_planet_size = 6
			
			set_owner = event_target:void_dweller_owner
			tec_start_hab_pops_spawn = {
				count = 7
				eager_count = 4
			}
			# deposit
			add_deposit = d_tec_minor_arcane_replicator

			#districts
			add_district = district_hab_housing
			add_district = district_hab_mining
			add_district = district_hab_mining

			# buildings
			tec_start_add_amenities_building = yes
			tec_start_hab_try_add_aux = yes
			
			tec_start_hab_zombies_effect = yes
			tec_start_hab_aquatic_flood_effect = yes
			validate_and_repair_planet_buildings_and_districts = yes

		}

		random_system_planet = {
			limit = {
				has_planet_flag = void_dweller_habitat_3
			}
			set_planet_entity = {
				entity = "habitat_phase_02_entity"
				graphical_culture = event_target:void_dweller_owner
			}
			set_planet_flag = advanced_habitat
			set_planet_size = 6
			

			set_owner = event_target:void_dweller_owner
			tec_start_hab_pops_spawn = {
				count = 7
				eager_count = 4
			}
			#deposit
			add_deposit = d_tec_minor_arcane_replicator

			#districts
			add_district = district_hab_housing
			add_district = district_hab_energy
			if = {
				limit = {
					owner = { tec_uses_trade_value = yes }
				}
				add_district = district_hab_commercial
			}
			else = {
				add_district = district_hab_energy
			}

			# buildings
			if = {
				limit = {
					owner = { is_low_tech_start = yes }
				}
				tec_start_add_unity_building = yes
			}
			tec_start_hab_try_add_aux = yes

			tec_start_hab_zombies_effect = yes
			tec_start_hab_aquatic_flood_effect = yes

			validate_and_repair_planet_buildings_and_districts = yes

		}
		if = {
			limit = {
				owner = {
					is_regular_empire = yes
					is_lithoid_empire = no
				}
			}
			# Capital habitat
			random_system_planet = {
				limit = {
					has_planet_flag = void_dweller_habitat_1
				}
				
				set_planet_flag = tec_food_habitat
				#districts
				add_district = district_tec_hab_food
			}
		}
		# Regular Lithoid Empires
		if = {
			limit = {
				owner = {
					is_regular_empire = yes
					is_lithoid_empire = yes
				}
			}

			# Capital habitat
			random_system_planet = {
				limit = {
					has_planet_flag = void_dweller_habitat_1
				}
				if = {
					limit = {
						owner = {
							is_catalytic_empire = no
						}
					}
					set_planet_flag = mining_habitat
					add_district = district_hab_mining
				}
				else = {
					set_planet_flag = tec_food_habitat
					add_district = district_tec_hab_food
				}
			}
		}

		# Hive regular Empires
		if = {
			limit = {
				owner = {
					is_hive_empire = yes
					is_lithoid_empire = no
				}
			}
			# Capital habitat
			random_system_planet = {
				limit = {
					has_planet_flag = void_dweller_habitat_1
				}
				set_planet_flag = tec_food_habitat
				add_district = district_tec_hab_food
			}
		}

		# Hive lithoid Empires
		if = {
			limit = {
				owner = {
					is_hive_empire = yes
					is_lithoid_empire = yes
					has_origin = origin_void_dwellers
				}
			}

			# Capital habitat
			random_system_planet = {
				limit = {
					has_planet_flag = void_dweller_habitat_1
				}
				if = {
					limit = {
						owner = {
							is_catalytic_empire = no
						}
					}
					set_planet_flag = mining_habitat
					add_district = district_hab_mining
				}
				else = {
					set_planet_flag = tec_food_habitat
					add_district = district_tec_hab_food
				}
			}
		}

		# Machine regular Empires
		if = {
			limit = {
				owner = {
					is_machine_empire = yes
				}
			}

			# Capital habitat
			random_system_planet = {
				limit = {
					has_planet_flag = void_dweller_habitat_1
				}
				if = {
					limit = {
						OR = {
							AND = {
								owner = {
									tec_is_organic_machine_empire = yes
								}
								event_target:tec_last_created_species = {
									is_lithoid = no
								}
							}
							owner_main_species = {
								has_trait = trait_tec_machine_biobrain
							}
							owner_main_species = {
								has_trait = trait_tec_machine_biomass
							}
							owner = {
								is_catalytic_empire = yes
							}
						}
					}
					set_planet_flag = tec_food_habitat
					add_district = district_tec_hab_food
				}
				else_if = {
					limit = {
						OR = {
							AND = {
								owner = {
									tec_is_organic_machine_empire = yes
								}
								event_target:tec_last_created_species = {
									is_lithoid = yes
								}
							}
							owner_main_species = {
								has_trait = trait_tec_machine_clockwork
							}
						}

					}
					set_planet_flag = mining_habitat
					add_district = district_hab_mining
				}
				else = {
					set_planet_flag = mining_habitat
					if = {
						limit = {
							owner = { tec_uses_trade_value = yes }
						}
						add_district = district_hab_commercial
					}
					else = {
						add_district = district_hab_energy
					}
				}
			}
		}
		
		every_system_planet = {
			limit = { has_planet_flag = mining_planet }
			create_mining_station = { owner = event_target:void_dweller_owner }
		}
	}
	# Cache triggers
	owner = { 
		every_owned_planet = {
			tec_cache_planet_type_triggers = yes
			tec_cache_capital_triggers = yes
		}
	}
}

give_starting_resources_effect = {
	optimize_memory
	if = {
		limit = {
			is_catalytic_empire = yes
		}
		add_resource = { food = 100	}
	}
	if = {
		limit = {
			tec_is_quantum_alloys_empire = yes
		}
		add_resource = { energy = 100	}
	}
	if = {
		limit = {
			is_machine_empire = yes
		}
		if = {
			limit = {
				OR = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
			if = {
				limit = { has_country_flag = lithoid_subspecies }
				add_resource = { minerals = 100	}
				add_resource = { energy = 100 }
			}
			else = {
				add_resource = { food = 100	}
				add_resource = { energy = 100 }
			}
		}
		else = {
			add_resource = { energy = 200 }
		}
	}
	else = {
		if = {
			limit = { is_lithoid_empire = no }
			if = {
				limit = {
					OR = {
						has_country_flag = lithoid_subspecies
						has_origin = origin_broken_shackles
					}
				}
				add_resource = { food = 100	}
				add_resource = { minerals = 100 }
			}
			else = {
				add_resource = { food = 200 }
			}
		}
		else = {
			if = {
				limit = {
					OR = {
						has_country_flag = non_lithoid_subspecies
						has_origin = origin_broken_shackles
					}
				}
				add_resource = { food = 100	}
				add_resource = { minerals = 100 }
			}
			else = {
				add_resource = { minerals = 200 }
			}
		}
	}
}

generate_home_planet_final_pass = {
	optimize_memory
	# Adjust life-seeded colonies
	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		owner = {
			# Nuke other colonies gained from advanced empire, etc
			every_owned_planet = {
				limit = { is_capital = no }
				remove_all_buildings = yes
				destroy_colony = yes
			}
			if = {
				limit = { 
					NOR = { 
						has_valid_civic = civic_permanent_employment 
						has_valid_civic = civic_machine_servitor
						has_valid_civic = civic_machine_assimilator
					} 
				}
				change_dominant_species = { species = last_created_species change_all = yes }
			}
			if = {
				limit = { 
					OR = { 
						has_valid_civic = civic_machine_servitor
						has_valid_civic = civic_machine_assimilator
					} 
				}
				last_created_species = {
					modify_species = {
						species = this
						ideal_planet_class = pc_gaia
					}
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_shattered_ring
					has_origin = origin_machine
				}
			}
		}
		owner = {
			capital_scope = {
				system_star = {
					set_deposit = d_energy_10
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_tree_of_life
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_tree_of_life_home
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_lithoid
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_lithoid_crater
				add_deposit = d_buried_lithoids
				add_deposit = d_buried_lithoids
				add_deposit = d_buried_lithoids
				add_deposit = d_buried_lithoids
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_lost_colony
				is_gestalt = no
			}
		}
		owner = {
			capital_scope = {
				add_modifier = { modifier = colonial_spirit_mod }
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				has_origin = origin_lost_colony
				is_gestalt = yes
			}
		}
		owner = {
			capital_scope = {
				add_modifier = { modifier = colonial_spirit_gestalt_mod }
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_broken_shackles
			}
		}
		owner = {
			capital_scope = {
				add_modifier = { modifier = free_at_last_broken_shackles days = 7200 }
				add_modifier = { modifier = culture_shock_broken_shackles days = 3600 }
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_progenitor_hive
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_progenitor
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_default
			}
		}
		owner = {
			if = {
				limit = {
					is_gestalt = no
				}
				capital_scope = {
					add_modifier = { modifier = prosp_uni_mod days = 7200 }
				}
			}
			else = {
				capital_scope = {
					add_modifier = { modifier = prosp_uni_mod_gestalt days = 7200 }
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_machine
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_machine_minerals
				solar_system = {
					every_system_planet = {
						limit = {
							colonizable_planet = no
							is_star = no
						}
						clear_deposits = yes
					}
					every_system_planet = {
						limit = {
							is_asteroid = yes
						}
						remove_planet = yes
					}
					every_system_planet = {
						limit = {
							colonizable_planet = no
							is_star = no
							is_asteroid = no
							NOT = { is_planet_class = pc_gas_giant }
						}
						change_pc = pc_broken
					}
					every_system_planet = {
						limit = {
							colonizable_planet = no
							is_star = no
							is_planet_class = pc_gas_giant
						}
						change_pc = pc_molten
						add_modifier = { modifier = chthonian_planet }
						every_moon = {
							limit = {
								colonizable_planet = no
							}
							remove_planet = yes
						}
						while = {
							limit = {
								planet_size >= 20
							}
							change_planet_size = -6
						}
					}
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				any_owned_pop = {
					has_trait = trait_exotic_metabolism
				}
			}
		}

		add_deposit = d_exotic_mountain
	}
}

tec_start_add_research_building = {
	if = {	# Archaeotech review balance
		limit = {
			exists = owner
			owner = {
				has_origin = origin_remnants
				has_ancrel = yes
			}
		}
		owner = {
			give_technology = {
				tech = tech_archaeostudies
				message = no
			}
		}
		add_building = building_archaeostudies_faculty
	}
	else_if = {
		limit = {
			exists = owner
			owner = {
				# Add exceptions here
				tec_is_reanimator_empire = no
			}
		}
		add_building = building_research_lab_1
	}
	else_if = {
		limit = {
			exists = owner
			owner = {
				tec_is_reanimator_empire = yes
			}
		}
		add_building = building_dread_encampment

		solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
			if = {	# Shattered ring
				limit = {
					exists = owner
					owner = {
						has_origin = origin_shattered_ring
					}
				}
				random_system_planet = {
					limit = {
						has_deposit_for = shipclass_research_station
						has_deposit = d_engineering_5
					}
					# Total size 15 deposit as the Irreparable Damage is normally a size 5 and non-Shattered Ring starts get an additional two size 6 deposits.
					add_deposit = d_engineering_10
				}
			} 	
			else = {
				while = {
					count = 2
					random_system_planet = {
						limit = {
							has_deposit_for = shipclass_research_station
							NOT = { has_deposit = d_engineering_6 }
						}
						clear_deposits = yes
						add_deposit = d_engineering_6
					}
				}
			}
		}
		
	}
}

tec_start_add_unity_building = {
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
			}
		}
		if = {
			limit = {
				owner = {
					tec_is_aiauth_empire = yes
				}
			}
			add_building = building_tec_aiauth_1
		}
		else = {
			if = {
				limit = { owner = { is_spiritualist = no } }
				add_building = building_bureaucratic_1
			}
			else = {
				add_building = building_temple # it will automatically convert to other
			}
		}
	}
	else_if = {
		limit = { 
			owner = {
				is_hive_empire = yes
			}
		}
		add_building = building_hive_node # it will automatically convert to other
	}
	else_if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		if = {
			limit = { 
				owner = { 
					NOT = { has_valid_civic = civic_machine_servitor } 
				} 
			}
			add_building = building_uplink_node
		}
		else = {
			add_building = building_organic_sanctuary
		}
	}
}

tec_start_add_amenities_building = {
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
			}
		}
		if = {
			limit = {
				owner = {
					is_spiritualist = no
					is_pleasure_seeker = yes
				}
			}
			add_building = building_holo_theatres
		}
		else_if = {
			limit = {
				owner = {
					is_spiritualist = yes
				}
			}
			add_building = building_temple # it will automatically convert to other
		}
		else = {
			add_building = building_commercial_zone
		}
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
			
		}
		if = {
			limit = {
				owner = { has_origin = origin_progenitor_hive }
			}
			add_building = building_offspring_nest
		}
		else = {
			add_building = building_hive_warren
		}
	}
	else_if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
			
		}
		if = {
			limit = {
				owner = {
					tec_is_trade_gestalt = yes
				}
			}
			add_building = building_tec_trade_machine_1
		}
		else = {
			
			add_building = building_drone_storage
		}
	}
}

tec_start_add_assembly_building = {
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
			}
		}
		if = {
			limit = {
				owner = {
					has_origin = origin_mechanists
				}
			}
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_tec_regular_machine_cult 
					}
				}
				add_building = building_mecha_monastery_1
			}
			else = {
				add_building = building_robot_assembly_plant
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		if = {
			limit = {
				owner = {
					tec_hive_can_have_spawningpools = yes
					NOT = {
						has_origin = origin_mechanists
					}
					NAND = {
						has_origin = origin_necrophage
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			if = {
				limit = {
					owner = {
						tec_is_biohive = yes
					}
				}
				add_building = building_tec_biohive_spawning_pool_1
			}
			else = {
				add_building = building_spawning_pool
			}
		}
		if = {
			limit = {
				owner = {
					has_origin = origin_mechanists
				}
			}
			add_building = building_hive_robot_assembly_plant
		}
	}
	else_if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		if = {
			limit = {
				owner = {
					NOT = {
						has_valid_civic = civic_tec_machine_reimaginator_cluster
					}
				}
			}
			add_building = building_machine_assembly_plant
		}
	}
}

tec_start_add_aux_building = {
	if = {
		limit = {
			owner = {
				has_valid_civic = civic_permanent_employment
			}
		}
		if = {
			limit = {
				free_building_slots <= 0
			}
			
			add_district_and_planet_size_if_needed_effect = {
				district = $city|district_city$
			}
		}
		add_building = building_posthumous_employment_center
	}
	if = {
		limit = {
			owner = {
				has_valid_civic = civic_private_healthcare_corporate
			}
		}
		if = {
			limit = {
				free_building_slots <= 0
			}

			add_district_and_planet_size_if_needed_effect = {
				district = $city|district_city$
			}
		}
		add_building = building_clinic
	}
	if = {
		limit = {
			owner = {
				NOT = {
					has_origin = origin_payback
				}
				has_valid_civic = civic_environmentalist
			}
			is_artificial = no
		}
		add_building = building_ranger_lodge
		add_blocker = { type = d_big_nature_preserve_blocker }
	}
	if = {
		limit = { owner = { has_origin = origin_machine } }
		if = {
			limit = { owner = { has_civic = civic_machine_assimilator } }
			add_deposit = d_organic_slurry
		}
		add_deposit = d_resource_consolidation_1
	}
	if = {
		limit = {
			owner = {
				tec_is_idyllic_bloom_empire = yes
				NOT = { has_origin = origin_life_seeded }
			}
		}
		add_building = building_gaiaseeders_1
	}
	if = {	# Relentless
		limit = {
			owner = {
				is_relentless_industrialist_empire = yes
			}
		}
		add_building = building_coordinated_fulfillment_center_1
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = {
					has_civic = civic_fanatic_purifiers 
					has_civic = civic_hive_devouring_swarm
				} #purges them instead
			}
		}
		if = {
			limit = {
				free_building_slots <= 0
			}
			
			add_district_and_planet_size_if_needed_effect = {
				district = $city|district_city$
			}
		}
		add_building = building_necrophage_elevation_chamber
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		while = {
			count = 2
			if = {
				limit = {
					free_building_slots <= 0
				}
				
				add_district_and_planet_size_if_needed_effect = {
					district = $city|district_city$
				}
			}
			add_building = building_clone_army_clone_vat
		}
		planet_event = {
			id = clones.10
			days = 1095
			random = 730
		}
	}
}

tec_start_add_capital = {
	# Capital
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		add_building = building_machine_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = no
			}
		}
		add_building = building_hive_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = yes
				tec_is_biohive = no
			}
		}
		add_building = building_tec_cyberhive_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = yes
			}
		}
		add_building = building_tec_biohive_capital
	}
	else = {
		add_building = building_capital
	}
	#
}

tec_start_add_habitat_capital = {
	# Capital
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		add_building = building_tec_hab_machine_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_hive_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = yes
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_cyberhive_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = yes
			}
		}
		add_building = building_tec_hab_biohive_major_capital
	}
	else = {
		add_building = building_hab_capital
	}
	#
}

tec_start_add_major_habitat_capital = {
	# Capital
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		add_building = building_tec_hab_machine_major_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_hive_major_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = yes
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_cyberhive_major_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = yes
			}
		}
		add_building = building_tec_hab_biohive_major_capital
	}
	else = {
		add_building = building_hab_major_capital
	}
	#
}

tec_start_add_system_habitat_capital = {
	# Capital
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		add_building = building_tec_hab_machine_system_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_hive_system_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = yes
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_cyberhive_system_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = yes
			}
		}
		add_building = building_tec_hab_biohive_system_capital
	}
	else = {
		add_building = building_hab_system_capital
	}
	#
}

tec_start_hab_zombies_effect = {
	if = {
		limit = {
			owner = {
				tec_is_zombie_empire = yes
			}
		}
		while = {
			count = 2
			random_owned_pop = {
				limit = {
					OR = {
						has_job_category = worker
						is_pop_category = worker
					}

					is_robotic_species = no
					NOT = { has_trait = trait_zombie }
				}
				make_pop_zombie = yes
			}
		}
	}
}

tec_start_hab_try_add_aux = {
	if = {
		limit = {
			free_building_slots > 0 
			owner = { NOT = { has_country_flag = tec_vd_added_aux } }
		}
		tec_start_add_aux_building = yes
		owner = { set_country_flag = tec_vd_added_aux }
	}
}

tec_start_hab_aquatic_flood_effect = {
	if = {
		limit = {
			owner = { tec_is_aquatic_empire = yes }
		}
		add_modifier = {
			modifier = flooded_habitat
			days = -1
		}
	}
}

tec_start_hab_pops_spawn = {
	if = {
		limit = {
			owner = {
				is_eager_explorer_empire = no
			}
		}
		while = {
			count = $count$
			create_pop = {
				species = owner_main_species
			}
		}
	}
	else = {
		while = {
			count = $eager_count$
			create_pop = {
				species = owner_main_species
			}
		}
	}
	if = {
		limit = { owner = { has_valid_civic = civic_machine_assimilator } }
		while = {
			count = 2
			random_owned_pop = {
				kill_pop = yes
			}
		}
		while = {
			count = 2
			create_pop = {
				species = event_target:tec_last_created_species
				ethos = random
			}
			last_created_pop = {
				clear_ethos = yes
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full_machine
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
			}
		}
	}
}

# Pop init

tec_save_last_species = {
	save_event_target_as = last_created_species
	save_event_target_as = tec_last_created_species
}

tec_start_handle_machine_species = {
	modify_species = {
		species = last_created_species
		add_trait = trait_machine_unit
		add_traits_at_start_of_list = yes
		effect = {
			tec_save_last_species = yes
		}
	}
}

tec_start_handle_syncretic_species = {
	last_created_species = {
		set_species_flag = syncretic_species@root.owner
		save_event_target_as = syncretic_species
		tec_save_last_species = yes
		if = {
			limit = {
				prev.owner = {
					has_origin = origin_syncretic_evolution
				}
			}
			set_citizenship_type = {
				country = root.owner
				type = citizenship_slavery
			}

			if = {
				limit = {
					prev.owner = {
						is_hive_empire = yes
						NOT = {
							has_ethic = ethic_gestalt_empathy
						}
					}
				}
				tec_make_syncretic_hive_species = yes
			}

			if = {
				limit = {
					prev.owner = {
						has_valid_civic = civic_tec_origin_elders
					}
				}
				tec_make_syncretic_elder_uplifted_species = yes
			}
		}
	}
}

tec_make_syncretic_hive_species = {
	if = {
		limit = {
			prev.owner = {
				tec_is_cyberhive = yes
			}
		}
		modify_species = {
			species = event_target:syncretic_species
			add_trait = trait_hive_mind
			add_trait = trait_cybernetic
			add_traits_at_start_of_list = yes
			change_scoped_species = yes
			effect = {
				set_species_flag = syncretic_species@root.owner
				save_event_target_as = syncretic_species
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
				tec_save_last_species = yes
			}
		}
	} 
	else = {
		modify_species = {
			species = event_target:syncretic_species
			add_trait = trait_hive_mind
			add_traits_at_start_of_list = yes
			change_scoped_species = yes
			effect = {
				set_species_flag = syncretic_species@root.owner
				save_event_target_as = syncretic_species
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
				tec_save_last_species = yes
			}
		}
	}
}

tec_make_syncretic_elder_uplifted_species = {
	modify_species = {
		species = event_target:syncretic_species
		remove_trait = trait_syncretic_proles
		add_trait = @trait_tec_se_subspecies
		change_scoped_species = yes
		effect = {
			set_species_flag = syncretic_species@root.owner
			save_event_target_as = syncretic_species
			tec_save_last_species = yes
		}
	}
}

tec_start_handle_biothrophy_species = {
	last_created_species = {
		set_species_flag = tec_original_biotrophy_@root.owner
		set_citizenship_type = {
			country = root.owner
			type = citizenship_organic_trophy
		}
		set_living_standard = {
			country = root.owner
			type = living_standard_organic_trophy
		}
		tec_save_last_species = yes
	}
}

tec_start_handle_assimilator_species = {
	last_created_species = {
		set_species_flag = cyborg_assimilated@root.owner
		set_citizenship_type = {
			country = root.owner
			type = citizenship_full_machine
		}
		set_living_standard = {
			country = root.owner
			type = living_standard_hive_mind
		}
		tec_save_last_species = yes
	}
}

tec_start_handle_mechanists = {
	owner = {
		tec_create_built_robot_species = yes
		set_country_flag = done_first_robot
	}
	while = {
		count = 10
		create_pop = {
			species = last_created_species
		}
	}
	calculate_modifier = yes
	every_owned_pop = {
		limit = {
			OR = {
				has_job = miner
				has_job = tec_reef_miner
				has_job = mining_drone
				has_job = tec_reef_drone
			}
			is_robotic_species = yes
		}
		modify_species = {
			species = this
			add_trait = trait_robot_power_drills
			add_trait = trait_robot_bulky
			add_traits_at_start_of_list = yes
		}
	}
	every_owned_pop = {
		limit = {
			OR = {
				has_job = farmer
				has_job = angler
				has_job = agri_drone
				has_job = tec_aqua_drone
			}
			is_robotic_species = yes
		}
		modify_species = {
			species = this
			add_trait = trait_robot_harvesters
			add_trait = trait_robot_bulky
			add_traits_at_start_of_list = yes
		}
	}
	every_owned_pop = {
		limit = {
			OR = {
				has_job = technician
				has_job = technician_drone
				has_job = tec_thermogenerator_drone
			}
			is_robotic_species = yes
		}
		modify_species = {
			species = this
			add_trait = trait_robot_superconductive
			add_trait = trait_robot_bulky
			add_traits_at_start_of_list = yes
		}
	}
	every_owned_pop = {
		limit = {
			is_robotic_species = yes
			NOT = { has_trait = trait_robot_bulky }
		}
		modify_species = {
			species = this
			add_trait = trait_robot_bulky
			add_traits_at_start_of_list = yes
		}
	}
	every_owned_pop = {
		limit = {
			is_robotic_species = yes
		}
		set_citizenship_type = { 
			country = root.owner
			type = citizenship_robot_servitude
		}
		set_living_standard = {
			country = root.owner
			type = living_standard_servitude
		}
	}
}

tec_start_handle_zombies = {
	while = {
		count = 4
		random_owned_pop = {
			limit = {
				OR = {
					has_job_category = worker
					is_pop_category = worker
				}
				is_robotic_species = no
				NOT = { has_trait = trait_zombie }
			}
			make_pop_zombie = yes
		}
	}
}