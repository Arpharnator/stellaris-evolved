# common\scripted_effects\zz_evolved_ascension_scripted_effects.txt

#Ascension scripted effects
# ----------------

tec_add_shroud_cd_effect = {
	add_modifier = {
		modifier = "shroud_cooldown"
		days = 2160
		time_multiplier = value:scripted_modifier_mult|MODIFIER|shroud_delve_cooldown|
	}
}

# Note: These effects are done for emulate a complete ascension perk 
# They contain the effects, flags, etc of the perk of an ap path
# Mostly used for FEs or as a tool to fix saves
	# _x_ap_effect = just the ap/starter bonuses
	# _x_finished_effect = like if the ascension took place
 # Biology
	tec_give_gene_t1_ap_effect = {
		set_country_flag = tec_advanced_ascension
		# Communicates 1st step
		set_country_flag = tec_comm_1st_step
	}
	tec_give_gene_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
		# Traits
		set_country_flag = tec_allow_t2_biotraits
		
	}
	tec_give_gene_t2_finished_effect = {
		set_country_flag = tec_advanced_ascension
		# Traits
		set_country_flag = tec_allow_t2_biotraits
		
	}

	tec_give_bio_t1_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_bio_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_bio_t2_finished_effect = {
		set_country_flag = tec_advanced_ascension
	}

 # Cybernetics
	tec_give_cybernetic_t1_ap_effect = {
		set_country_flag = tec_advanced_ascension
		# Communicates 1st step
		set_country_flag = tec_comm_1st_step
	}
	tec_give_cybernetic_t1_finished_effect = {
		set_country_flag = tec_advanced_ascension
		# Communicates 1st step
		set_country_flag = tec_comm_1st_step
	}

	tec_give_cybernetic_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_cybernetic_t2_finished_effect = {
		set_country_flag = tec_advanced_ascension
	}

 # Synthetics
	tec_give_synthetic_t1_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_synthetic_t1_finished_effect = {
		set_country_flag = tec_advanced_ascension
	}

	tec_give_synthetic_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_synthetic_t2_finished_standard_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_synthetic_t2_finished_nanites_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_synthetic_t2_finished_livingmetal_effect = {
		set_country_flag = tec_advanced_ascension
	}

 # Psionics
	tec_give_psionic_t1_ap_effect = {
		set_country_flag = tec_advanced_ascension
		# Communicates 1st step
		set_country_flag = tec_comm_1st_step
	}
	tec_give_psionic_t1_finished_effect = {
		set_country_flag = tec_advanced_ascension
		# Communicates 1st step
		set_country_flag = tec_comm_1st_step
	}

	tec_give_psionic_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_psionic_t2_finished_effect = {
		set_country_flag = tec_advanced_ascension
	}

 # Psychic
	tec_give_psychic_t1_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_psychic_t1_finished_effect = {
		set_country_flag = tec_advanced_ascension
	}

	tec_give_psychic_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_psychic_t2_finished_effect = {
		set_country_flag = tec_advanced_ascension
	}
 # Ethereal
	tec_give_etheral_t1_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_etheral_t1_finished_effect = {
		set_country_flag = tec_advanced_ascension
	}

	tec_give_etheral_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_etheral_t2_finished_effect = {
		set_country_flag = tec_advanced_ascension
	}

 # Mixed
	tec_give_replicant_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_replicant_t2_finished_effect = {
		set_country_flag = tec_advanced_ascension
	}

	tec_give_biopsionic_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_biopsionic_t2_finished_effect = {
		set_country_flag = tec_advanced_ascension
		# Path finished
		set_country_flag = tec_biopsionic_path_finished
		# Alter species
		tec_create_biopsionic_species = yes
		# TO DO create specific leader ascension trait handler
		every_owned_leader = {
			add_leader_traits_after_modification = yes
			remove_leader_traits_after_modification = yes
		}
		every_pool_leader = {
			add_leader_traits_after_modification = yes
			remove_leader_traits_after_modification = yes
		}
		# Flags
		set_country_flag = tec_biopsionic_assimilation
	}

	tec_give_cyberpsionic_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_cyberpsionic_t2_finished_effect = {
		set_country_flag = tec_advanced_ascension
		# Path finished
		set_country_flag = tec_cyberpsionic_path_finished
		# Alter species
		tec_create_cyberpsionic_species = yes
		# TO DO create specific leader ascension trait handler
		every_owned_leader = {
			add_leader_traits_after_modification = yes
			remove_leader_traits_after_modification = yes
		}
		every_pool_leader = {
			add_leader_traits_after_modification = yes
			remove_leader_traits_after_modification = yes
		}
		# Flags
		set_country_flag = tec_cyberpsionic_assimilation
		remove_country_flag = tec_cybernetic_t1_assimilation
		remove_country_flag = tec_cybernetic_t2_assimilation
		# Features
		set_country_flag = tec_u_cp_equilibrium
		set_country_flag = tec_u_cp_control
		set_country_flag = tec_u_cp_power
		set_country_flag = tec_u_cp_cyborg_traits
		set_country_flag = tec_u_cp_robot_traits
		set_country_flag = tec_cyberpsionic_buildings
		# Psionic traits
		set_country_flag = tec_announced_psionic_traits
	}

	tec_give_infinity_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}

 # Gestalt
	tec_give_machine_cyb_t1_ap_effect = {
		set_country_flag = tec_advanced_ascension
		# Communicates 1st step
		set_country_flag = tec_comm_1st_step
	}
	tec_give_machine_cyb_t1_finished_effect = {
		set_country_flag = tec_advanced_ascension
		# Communicates 1st step
		set_country_flag = tec_comm_1st_step
	}

	tec_give_machine_cyb_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
	tec_give_machine_cyb_t2_finished_effect = {
		set_country_flag = tec_advanced_ascension
	}

	tec_give_hive_psi_t1_ap_effect = {
		set_country_flag = tec_advanced_ascension
		# Communicates 1st step
		set_country_flag = tec_comm_1st_step
	}

	tec_give_hive_psi_t2_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}

	tec_give_hive_biopsionic_ap_effect = {
		set_country_flag = tec_advanced_ascension
	}
# /

# Species changes
	tec_create_template_species = {	# TO DO
	}
	tec_create_template_species_mod = {	# TO DO
	}
	# Given a species, create a mod with trait_cybernetic and apply to all pops, leaders
	# and armies that have the original species and the same owner as the scope object.
	# Scope: Something that has a species and an owner
	REF_create_cybernetic_species_mod = {
		optimize_memory
		species = {
			modify_species = {
				remove_trait = trait_latent_psionic
				remove_trait = trait_psionic
				effect = {
					create_species = {
						is_mod = yes
						name = this
						plural = this
						class = this
						portrait = this
						traits = this
						can_be_modified = this
						homeworld = this
						namelist = this
						gender = this
						traits = {
							ideal_planet_class = this
							trait = trait_cybernetic
						}
					}
				}
			}
			save_event_target_as = changing_species
		}
	
		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
	# Sampled from utopia.2501 - all the immediate except communications
	REF_create_cybernetic_species = {
		optimize_memory
		#set_country_flag = cyborg_empire
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
				}
			}
			random_owned_pop = {
				limit = { is_exact_same_species = root }
				create_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = { is_same_species = root }
				create_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		if = {
			limit = {
				is_hive_empire = no
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							NOR = {
								has_trait = trait_cybernetic
								has_trait = trait_mechanical
								has_trait = trait_machine_unit
								has_trait = trait_hive_mind
							}
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							NOR = {
								has_trait = trait_cybernetic
								has_trait = trait_mechanical
								has_trait = trait_machine_unit
								has_trait = trait_hive_mind
							}
						}
					}
					create_cybernetic_species_mod = yes
				}
			}
		}

		else_if = {
			limit = {
				is_hive_empire = yes
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							has_trait = trait_hive_mind
							NOR = {
								has_trait = trait_cybernetic
								has_trait = trait_mechanical
								has_trait = trait_machine_unit
							}
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							has_trait = trait_hive_mind
							NOR = {
								has_trait = trait_cybernetic
								has_trait = trait_mechanical
								has_trait = trait_machine_unit
							}
						}
					}
					create_cybernetic_species_mod = yes
				}
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					NOR = {
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}

		# removed
			#observer_event = { id = observer.55 }
			#every_country = {
			#	limit = {
			#		is_ai = no
			#		NOT = { is_same_value = root }
			#		has_communications = root
			#		root = {
			#			is_primitive = no
			#		}
			#	}
			#	country_event = { id = utopia.2505 days = 5 }
			#}
			#if = {
			#	limit = {
			#		any_planet_within_border = {
			#			has_planet_flag = fotd_seperatist_planet@root
			#			owner = {
			#				has_country_flag = fotd_seperatist_country@root
			#			}
			#		}
			#	}
			#	country_event = { id = origin.6095 days = 5 random = 2 }
			#}
		# /
	}

# Ascension paths
 # Latent Psionic
	tec_create_latent_psionic_species_mod = {
		optimize_memory

		species = {
			modify_species = {
				# TO DO create inline
				remove_trait = trait_cybernetic
				remove_trait = trait_tec_superior_cybernetics_main
				remove_trait = trait_tec_cyberpsionic_main
				remove_trait = trait_latent_psionic
				remove_trait = trait_psionic
				remove_trait = trait_tec_psychic_main
				remove_trait = trait_tec_hive_psionic_entanglement
				remove_trait = trait_tec_hive_psionic_resonance
				effect = {
					create_species = {
						is_mod = yes
						name = this
						plural = this
						class = this
						portrait = this
						traits = this
						can_be_modified = this
						homeworld = this
						namelist = this
						gender = this
						traits = {
							trait = trait_latent_psionic
						}
					}
				}
			}
			save_event_target_as = changing_species
		}
	
		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
	tec_create_latent_psionic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_latent_psionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = {
					is_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_latent_psionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		while = {
			limit = {
				any_owned_pop = {
					is_sapient = yes
					species = {
						is_robotic = no
						NOR = {
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = yes
						}
					}
				}
			}
			random_owned_pop = {
				limit = {
					is_sapient = yes
					species = {
						is_robotic = no
						NOR = {
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = yes
						}
					}
				}
				tec_create_latent_psionic_species_mod = yes
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_latent_psionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_latent_psionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						tec_create_latent_psionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_robotic = no
					tec_has_ascension_main_trait = no
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					tec_create_latent_psionic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}
 # Psionic
	tec_create_psionic_species_mod = {
		optimize_memory
		species = {
			modify_species = {
				# TO DO create inline
				remove_trait = trait_cybernetic
				remove_trait = trait_tec_superior_cybernetics_main
				remove_trait = trait_tec_cyberpsionic_main
				remove_trait = trait_latent_psionic
				remove_trait = trait_psionic
				remove_trait = trait_tec_psychic_main
				remove_trait = trait_tec_hive_psionic_entanglement
				remove_trait = trait_tec_hive_psionic_resonance
				effect = {
					create_species = {
						is_mod = yes
						name = this
						plural = this
						class = this
						portrait = this
						traits = this
						can_be_modified = this
						homeworld = this
						namelist = this
						gender = this
						traits = {
							trait = trait_psionic
						}
					}
				}
			}
			save_event_target_as = changing_species
		}
	
		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
	tec_create_psionic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_psionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = {
					is_same_species = root 
					tec_has_stapled_trait = no
				}
				tec_create_psionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		if = {
			limit = {
				is_hive_empire = no
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOR = {
								has_trait = trait_hive_mind
								tec_has_ascension_main_trait = yes
							}
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOR = {
								has_trait = trait_hive_mind
								tec_has_ascension_main_trait = yes
							}
						}
					}
					tec_create_psionic_species_mod = yes
				}
			}
		}

		else_if = {
			limit = {
				is_hive_empire = yes
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOR = {
								has_trait = trait_hive_mind
								tec_has_ascension_main_trait = yes
							}
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOR = {
								has_trait = trait_hive_mind
								tec_has_ascension_main_trait = yes
							}
						}
					}
					tec_create_psionic_species_mod = yes
				}
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_psionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_psionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						tec_create_psionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_robotic = no
					tec_has_ascension_main_trait = no
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					tec_create_psionic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_psionic }
				NOR = {
					has_trait = leader_trait_admiral_psionic
					has_trait = leader_trait_general_psionic
					has_trait = leader_trait_governor_psionic
					has_trait = leader_trait_scientist_psionic
					has_trait = leader_trait_ruler_psionic
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_psionic
				add_ruler_trait = leader_trait_ruler_psionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_psionic
				add_ruler_trait = leader_trait_ruler_psionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_psionic
				add_ruler_trait = leader_trait_ruler_psionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_psionic
				add_ruler_trait = leader_trait_ruler_psionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_psionic
				add_ruler_trait = leader_trait_ruler_psionic
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_psionic }
				NOR = {
					has_trait = leader_trait_admiral_psionic
					has_trait = leader_trait_general_psionic
					has_trait = leader_trait_governor_psionic
					has_trait = leader_trait_scientist_psionic
					has_trait = leader_trait_ruler_psionic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_psionic
				add_ruler_trait = leader_trait_ruler_psionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_psionic
				add_ruler_trait = leader_trait_ruler_psionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_psionic
				add_ruler_trait = leader_trait_ruler_psionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_psionic
				add_ruler_trait = leader_trait_ruler_psionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_psionic
				add_ruler_trait = leader_trait_ruler_psionic
			}
		}
	}
 # Genetic perfection
	tec_create_genetic_perfection_species_mod = {
		optimize_memory
		# PRE STEPS
		if = {	# Necrophage special events
			limit = {
				owner = {
					has_origin = origin_necrophage
					has_country_flag = tec_gene_necrophage_evolved
				}
			}
			modify_species = {
				remove_trait = trait_necrophage
				add_trait = @trait_tec_necroborn
				add_traits_at_start_of_list = yes
				effect = {
					root = {
						change_dominant_species = {
							species = prev
						}
					}
				}
			}
			owner_main_species = {
				every_galaxy_species = {
					limit = {
						is_same_species = prev
						NOT = { is_same_value = prev }
						has_trait = trait_necrophage
						NOR = {
							any_country = {
								NOT = { is_same_value = root }
								owner_main_species = {
									is_same_value = prevprev
								}
							}
							any_species_pop = {
								NOT = { is_owned_by = root }
							}
						}
					}
					change_species_characteristics = {
						remove_trait = trait_necrophage
						add_trait = @trait_tec_necroborn
						add_traits_at_start_of_list = yes
					}
				}
			}
			owner = { remove_country_flag = tec_gene_necrophage_evolved }
		}
		if = {	# Elder Guidance
			limit = {
				owner = {
					has_origin = origin_syncretic_evolution
					has_country_flag = tec_gene_elder_cured
				}
			}
			modify_species = {
				remove_trait = @trait_tec_se_elder
				add_trait = @trait_tec_se_subspecies
				add_traits_at_start_of_list = yes
				effect = {
					root = {
						change_dominant_species = {
							species = prev
						}
					}
				}
			}
			owner_main_species = {
				every_galaxy_species = {
					limit = {
						is_same_species = prev
						NOT = { is_same_value = prev }
						has_trait = @trait_tec_se_elder
						NOR = {
							any_country = {
								NOT = { is_same_value = root }
								owner_main_species = {
									is_same_value = prevprev
								}
							}
							any_species_pop = {
								NOT = { is_owned_by = root }
							}
						}
					}
					change_species_characteristics = {
						remove_trait = @trait_tec_se_elder
						add_trait = @trait_tec_se_subspecies
						add_traits_at_start_of_list = yes
					}
				}
			}
			owner = { remove_country_flag = tec_gene_necrophage_evolved }
		}
		species = {
			modify_species = {
				effect = {
					create_species = {
						is_mod = yes
						name = this
						plural = this
						class = this
						portrait = this
						traits = this
						can_be_modified = this
						homeworld = this
						namelist = this
						gender = this
						traits = {
							ideal_planet_class = pc_tec_gene
						}
						effect = {
							save_event_target_as = tec_biospecies
							rename_species = {
								prompt_country = root
								name_list = ascension_list
							}
						}
					}
				}
			}
			save_event_target_as = changing_species
		}
		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
	tec_create_genetic_perfection_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_genetic_perfection_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = {
					is_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_genetic_perfection_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		if = {
			limit = {
				is_hive_empire = no
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							tec_is_bioservant_species = no
							NOR = {
								has_trait = trait_hive_mind
								tec_has_ascension_main_trait = yes
							}
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							tec_is_bioservant_species = no
							NOR = {
								has_trait = trait_hive_mind
								tec_has_ascension_main_trait = yes
							}
						}
					}
					tec_create_genetic_perfection_species_mod = yes
				}
			}
		}

		else_if = {
			limit = {
				is_hive_empire = yes
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							tec_is_bioservant_species = no
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = no
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							tec_is_bioservant_species = no
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = no
						}
					}
					tec_create_genetic_perfection_species_mod = yes
				}
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						is_robotic = no
						tec_is_bioservant_species = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_is_bioservant_species = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_genetic_perfection_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						is_robotic = no
						tec_is_bioservant_species = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_is_bioservant_species = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_genetic_perfection_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						is_robotic = no
						tec_is_bioservant_species = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						is_robotic = no
						tec_is_bioservant_species = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						tec_create_genetic_perfection_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_robotic = no
					tec_is_bioservant_species = no
					tec_has_ascension_main_trait = no
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					tec_create_genetic_perfection_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}
 # Cybernetic T1
	tec_create_cybernetic_species_mod = {
		optimize_memory
		species = {
			modify_species = {
				# TO DO create inline
				remove_trait = trait_latent_psionic
				remove_trait = trait_psionic
				remove_trait = trait_tec_cyberpsionic_main
				effect = {
					create_species = {
						is_mod = yes
						name = this
						plural = this
						class = this
						portrait = this
						traits = this
						can_be_modified = this
						homeworld = this
						namelist = this
						gender = this
						traits = {
							ideal_planet_class = this
							trait = trait_cybernetic
						}
					}
				}
			}
			save_event_target_as = changing_species
		}
	
		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
	tec_create_cybernetic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = {
					is_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		if = {
			limit = {
				is_hive_empire = no
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOT = {
								has_trait = trait_hive_mind
							}
							tec_has_ascension_main_trait = no
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOT = {
								has_trait = trait_hive_mind
							}
							tec_has_ascension_main_trait = no
						}
					}
					tec_create_cybernetic_species_mod = yes
				}
			}
		}

		else_if = {
			limit = {
				is_hive_empire = yes
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = no
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = no
						}
					}
					tec_create_cybernetic_species_mod = yes
				}
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						tec_create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_robotic = no
					tec_has_ascension_main_trait = no
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					tec_create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}
	}
	# Note: Overwritten vanilla effects
	create_cybernetic_species_mod = {
		tec_create_cybernetic_species_mod = yes
	}
	create_cybernetic_species = {
		tec_create_cybernetic_species = yes
	}
 # Cybernetic T2
	tec_create_advanced_cybernetic_species_mod = {
		optimize_memory
		species = {
			modify_species = {
				# TO DO create inline
				remove_trait = trait_latent_psionic
				remove_trait = trait_psionic
				remove_trait = trait_tec_biopsionic_main
				remove_trait = trait_cybernetic
				remove_trait = trait_tec_cyberpsionic_main
				effect = {
					create_species = {
						is_mod = yes
						name = this
						plural = this
						class = this
						portrait = this
						traits = this
						can_be_modified = this
						homeworld = this
						namelist = this
						gender = this
						traits = {
							ideal_planet_class = this
							trait = trait_tec_superior_cybernetics_main
						}
					}
				}
			}
			save_event_target_as = changing_species
		}
	
		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
	tec_create_advanced_cybernetic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_advanced_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = {
					is_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_advanced_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		if = {
			limit = {
				is_hive_empire = no
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOT = {
								has_trait = trait_hive_mind
							}
							tec_has_ascension_main_trait = no
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOT = {
								has_trait = trait_hive_mind
							}
							tec_has_ascension_main_trait = no
						}
					}
					tec_create_advanced_cybernetic_species_mod = yes
				}
			}
		}

		else_if = {
			limit = {
				is_hive_empire = yes
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = no
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = no
						}
					}
					tec_create_advanced_cybernetic_species_mod = yes
				}
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_advanced_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_advanced_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						tec_create_advanced_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_robotic = no
					tec_has_ascension_main_trait = no
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					tec_create_advanced_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_tec_superior_cybernetics_main }
				NOR = {
					has_trait = leader_trait_admiral_tec_superior_cybernetics_main
					has_trait = leader_trait_general_tec_superior_cybernetics_main
					has_trait = leader_trait_governor_tec_superior_cybernetics_main
					has_trait = leader_trait_scientist_tec_superior_cybernetics_main
					has_trait = leader_trait_ruler_tec_superior_cybernetics_main
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_superior_cybernetics_main
				add_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_superior_cybernetics_main
				add_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_superior_cybernetics_main
				add_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_superior_cybernetics_main
				add_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_superior_cybernetics_main
				add_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_tec_superior_cybernetics_main }
				NOR = {
					has_trait = leader_trait_admiral_tec_superior_cybernetics_main
					has_trait = leader_trait_general_tec_superior_cybernetics_main
					has_trait = leader_trait_governor_tec_superior_cybernetics_main
					has_trait = leader_trait_scientist_tec_superior_cybernetics_main
					has_trait = leader_trait_ruler_tec_superior_cybernetics_main
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_superior_cybernetics_main
				add_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_superior_cybernetics_main
				add_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_superior_cybernetics_main
				add_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_superior_cybernetics_main
				add_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_superior_cybernetics_main
				add_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
			}
		}
	}
	tec_create_advanced_cybernetic_species_ap = {
		optimize_memory
		modify_species = {
			species = this
			add_trait = @trait_tec_superior_cybernetics_main
			add_traits_at_start_of_list = yes
			remove_trait = trait_cybernetic
			change_scoped_species = no
			effect = {
				root = {
					every_owned_pop = {
						limit = {
							is_same_species = prevprevprev
							tec_has_stapled_trait = no
						}
						change_species = prevprev
					}
					
					every_owned_leader = {
						limit = {
							is_same_species = prevprevprev
							tec_has_stapled_trait = no
						}
						change_species = prevprev
						add_leader_traits_after_modification = yes
						remove_leader_traits_after_modification = yes
					}
					every_pool_leader = {
						limit = {
							is_same_species = prevprevprev
							tec_has_stapled_trait = no
						}
						change_species = prevprev
						add_leader_traits_after_modification = yes
						remove_leader_traits_after_modification = yes
					}

					every_owned_army = {
						limit = {
							is_same_species = prevprevprev
							species = { tec_has_stapled_trait = no }
						}
						modify_army = {
							species = prevprev
						}
					}
					every_controlled_ship = {
						limit = {
							is_ship_class = shipclass_colonizer
							species = {
								is_same_species = prevprevprev
								tec_has_stapled_trait = no
							}
						}
						change_species = prevprev
						#	change_species = event_target:new_replicant_species
					}
				}
			}
		}
	}	# Check zombies
 # Synth
	# Total, no need of a mod
	vanilla_synth_effect = {	#Event utopia.2551
		set_country_flag = synthetic_empire
		if = {
			limit = {
				has_policy_flag = robots_outlawed
			}
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = yes
			}
		}
		if = {
			limit = {
				OR = {
					has_policy_flag = ai_servitude
					has_policy_flag = ai_outlawed
				}
			}
			set_policy = {
				policy = artificial_intelligence_policy
				option = ai_full_rights
				cooldown = yes
			}
		}
		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_divinity_silence_the_soulless"
					is_active_resolution = "resolution_divinity_a_defined_purpose"
				}
			}
			owner = {
				set_timed_country_flag = { flag = resolution_breached_synthetic_evolution days = 3600 }
			}
		}
		give_technology = { tech = tech_bio_reactor message = no }

		create_species = {
			is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "ROBOT"
			homeworld = root.species
			portrait = "default_robot"
			traits = {
				trait = "trait_mechanical"
			}

			effect = {
				if = {
					limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
					prev = {
						switch = {
							trigger = is_species_class
							HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
							MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
							REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
							AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
							ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
							MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
							FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
							PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							LITHOID = { prev = { change_species_characteristics = { portrait = "lith_machine" } } }
							NECROID = { prev = { change_species_characteristics = { portrait = "nec_machine" } } }
							AQUATIC = { prev = { change_species_characteristics = { portrait = "aqu_machine" } } }
							TOX = { prev = { change_species_characteristics = { portrait = "tox_machine" } } }
						}
					}
				}

				rename_species = {
					prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}

				save_event_target_as = new_robotic_species
			}
		}
		every_owned_pop = {
			limit = {
				is_being_purged = no
				species = {
					is_robotic = no
					is_livestock = no
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_robotic = no
					is_livestock = no
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					is_robotic = no
					is_livestock = no
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					is_robotic = no
					is_livestock = no
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_leader = {
			limit = {
				OR = {
					species = {
						is_robotic = no
						is_livestock = no
					}
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = {
				OR = {
					species = {
						is_robotic = no
						is_livestock = no
					}
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:new_robotic_species }

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
		}
		every_envoy = {
			limit = {
				species = {
					is_robotic = no
					is_livestock = no
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
			}
		}
	}
	tec_create_synth_species = {
		if = {
			limit = {
				has_policy_flag = robots_outlawed
			}
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = yes
			}
		}
		if = {
			limit = {
				OR = {
					has_policy_flag = ai_servitude
					has_policy_flag = ai_outlawed
				}
			}
			set_policy = {
				policy = artificial_intelligence_policy
				option = ai_full_rights
				cooldown = yes
			}
		}
		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_divinity_silence_the_soulless"
					is_active_resolution = "resolution_divinity_a_defined_purpose"
				}
			}
			owner = {
				set_timed_country_flag = { flag = resolution_breached_synthetic_evolution days = 3600 }
			}
		}

		give_technology = { tech = tech_bio_reactor message = no }

		# Executes the robomorphosis
		if = {
			limit = {
				has_country_flag = tec_synth_use_robots
				any_owned_species = {
					has_species_flag = tec_synth_host_species_@root
				}
			}
			random_owned_species = {
				limit = {
					has_species_flag = tec_synth_host_species_@root
				}
				save_event_target_as = new_robotic_species
			}
		}
		else = {
			create_species = {
				# technically its applied at modification to avoid purifiers strange interactions, lets see...
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "ROBOT"
				portrait = "default_robot"
				traits = {
					trait = "trait_mechanical"
				}
		
				effect = {
					if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
						prev = {
							switch = {
								trigger = is_species_class
								HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } }}
								MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } }}
								REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } }}
								AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } }}
								ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } }}
								MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } }}
								FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } }}
								PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } }}
								LITHOID = { prev = { change_species_characteristics = { portrait = "lith_machine" } }}
								NECROID = { prev = { change_species_characteristics = { portrait = "nec_machine" } }}
								AQUATIC = { prev = { change_species_characteristics = { portrait = "aqu_machine" } }}
								TOX = { prev = { change_species_characteristics = { portrait = "tox_machine" } } }
							}
						}
					}
		
					rename_species = {
						prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
						name_list = ascension_list
					}
		
					save_event_target_as = new_robotic_species
				}
			}
		}

		# Extra bonuses
		if = {
			limit = {
				is_lithoid_empire = no
				has_country_flag = tec_synth_slow_transition
			}
			event_target:new_robotic_species = {
				modify_species = {
					add_trait = trait_tec_machine_biobrain
					effect = {
						save_event_target_as = new_robotic_species
					}
				}
			}
		}
		
		every_owned_pop = {
			limit = {
				is_being_purged = no
				species = {
					is_livestock = no
					is_robotic = no
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_livestock = no
					is_robotic = no
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					is_livestock = no
					is_robotic = no
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					is_livestock = no
					is_robotic = no
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_leader = {
			limit = {
				OR = {
					species = {
						is_robotic = no
						is_livestock = no
					}
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}

		every_pool_leader = {
			limit = {
				OR = {
					species = {
						is_robotic = no
						is_livestock = no
					}
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:new_robotic_species }

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		every_envoy = {
			limit = { 
				species = {
					is_livestock = no
					NOT = {
						has_trait = trait_mechanical
					}
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}

	}
 # Synth T2
	tec_create_synth_nanite_species = {	# TO DO
	}
	tec_create_synth_nanite_species_mod = {	# TO DO
	}
	tec_create_synth_livingmetal_species = {	# TO DO
	}
	tec_create_synth_livingmetal_species_mod = {	# TO DO
	}
 # Replicant
	# Total, no need of a mod
	tec_create_replicant_species = {	# NUKE HABITABILITY FIX
		optimize_memory
		species = {
			modify_species = {
				species = this
				ideal_planet_class = pc_nuked
				# Trait cleanup
					# Origin traits
						remove_trait = trait_necrophage
	
						remove_trait = trait_clone_soldier_fertile
						remove_trait = trait_clone_soldier_infertile
						remove_trait = trait_clone_soldier_infertile_full_potential
	
						remove_trait = trait_tec_se_elder
					# /
					# Cyborgs
						remove_trait = trait_cybernetic
						remove_trait = @trait_tec_superior_cybernetics_main
						remove_trait = @trait_tec_cyberpsionic_main
					# /
					# Synths
						remove_trait = trait_mechanical
						remove_trait = trait_machine_unit
					# /
					# Special case
					remove_trait = trait_zombie
				# /	
				effect = {
					create_species = {
						# technically its applied at modification to avoid purifiers strange interactions, lets see...
						is_mod = yes
						name = this
						namelist = this
						plural = this
						class = "REPLICANT"
						portrait = this
						can_be_modified = yes
						gender = this
						homeworld = root.capital_scope
						traits = {
							trait = @trait_tec_replicant_main
						}
						traits = this
						effect = {
							modify_species = {
								change_scoped_species = no
								remove_trait = trait_pc_nuked_preference
								effect = {
									rename_species = {
										prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
										name_list = ascension_list
									}
									save_event_target_as = tec_replicant_species
								}
							}
						}
					}
				}
			}
			save_event_target_as = tec_original_species
		}

		# Saves flags
		event_target:tec_original_species = {
			save_event_target_as = tec_target_species
			set_species_flag = tec_prereplicant_species_of_@event_target:tec_replicant_species
		}

		event_target:tec_replicant_species = {
			set_species_flag = tec_replicant_species_of_@event_target:tec_target_species
		}

		every_owned_pop = {
			limit = {
				if = {
					limit = {
						owner = {
							is_hive_empire = no
						}
					}
					is_being_purged = no
					species = {
						is_livestock = no
						is_robotic = no
					}
				}
				else = {
					OR = {
						has_trait = trait_hive_mind
						NOR = {
							is_being_purged = yes
							species = {
								OR = {
									is_livestock = yes
									is_robotic = yes
								}
							}
						}
					}
				}
			}
			change_species = event_target:tec_replicant_species
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_livestock = no
					is_robotic = no
				}
			}
			change_species = event_target:tec_replicant_species
		}

		every_owned_army = {
			limit = {
				exists = planet
				species = {
					is_livestock = no
					is_robotic = no
				}
			}
			change_species = event_target:tec_replicant_species
		}

		every_owned_leader = {
			limit = {
				OR = {
					species = {
						is_robotic = no
						is_livestock = no
					}
					has_trait = leader_trait_admiral_tec_replicant
					has_trait = leader_trait_ruler_tec_replicant
					has_trait = leader_trait_general_tec_replicant
					has_trait = leader_trait_governor_tec_replicant
					has_trait = leader_trait_scientist_tec_replicant
				}
			}
			change_species = event_target:tec_replicant_species
			change_leader_portrait = species
		}

		every_pool_leader = {
			limit = {
				OR = {
					species = {
						is_robotic = no
						is_livestock = no
					}
					has_trait = leader_trait_admiral_tec_replicant
					has_trait = leader_trait_ruler_tec_replicant
					has_trait = leader_trait_general_tec_replicant
					has_trait = leader_trait_governor_tec_replicant
					has_trait = leader_trait_scientist_tec_replicant
				}
			}
			change_species = event_target:tec_replicant_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:tec_replicant_species }

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_tec_replicant_main }
				NOR = {
					has_trait = leader_trait_admiral_tec_replicant
					has_trait = leader_trait_general_tec_replicant
					has_trait = leader_trait_governor_tec_replicant
					has_trait = leader_trait_scientist_tec_replicant
					has_trait = leader_trait_ruler_tec_replicant
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_admiral_tec_superior_cybernetics_main
				remove_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
				remove_trait = leader_trait_admiral_tec_cyberpsionic
				remove_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_general_tec_superior_cybernetics_main
				remove_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
				remove_trait = leader_trait_general_tec_cyberpsionic
				remove_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_governor_tec_superior_cybernetics_main
				remove_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
				remove_trait = leader_trait_governor_tec_cyberpsionic
				remove_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_scientist_tec_superior_cybernetics_main
				remove_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
				remove_trait = leader_trait_scientist_tec_cyberpsionic
				remove_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_ruler_tec_superior_cybernetics_main
				remove_trait = leader_trait_ruler_tec_cyberpsionic
			}
		}
		every_envoy = {
			limit = { 
				species = {
					is_livestock = no
					NOT = {
						has_trait = trait_tec_replicant_main
					}
				}
			}
			change_species = event_target:tec_replicant_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_tec_replicant_main }
				NOR = {
					has_trait = leader_trait_admiral_tec_replicant
					has_trait = leader_trait_general_tec_replicant
					has_trait = leader_trait_governor_tec_replicant
					has_trait = leader_trait_scientist_tec_replicant
					has_trait = leader_trait_ruler_tec_replicant
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_admiral_tec_superior_cybernetics_main
				remove_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
				remove_trait = leader_trait_admiral_tec_cyberpsionic
				remove_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_general_tec_superior_cybernetics_main
				remove_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
				remove_trait = leader_trait_general_tec_cyberpsionic
				remove_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_governor_tec_superior_cybernetics_main
				remove_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
				remove_trait = leader_trait_governor_tec_cyberpsionic
				remove_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_scientist_tec_superior_cybernetics_main
				remove_ruler_trait = leader_trait_ruler_tec_superior_cybernetics_main
				remove_trait = leader_trait_scientist_tec_cyberpsionic
				remove_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_ruler_tec_superior_cybernetics_main
				remove_trait = leader_trait_ruler_tec_cyberpsionic
			}
		}
	}
 # Biopsionic
	tec_create_biopsionic_species_mod = {
		species = {
			modify_species = {
				# TO DO create inline
				remove_trait = trait_cybernetic
				remove_trait = trait_tec_superior_cybernetics_main
				remove_trait = trait_tec_cyberpsionic_main
				remove_trait = trait_latent_psionic
				remove_trait = trait_psionic
				remove_trait = trait_tec_psychic_main
				remove_trait = trait_tec_hive_psionic_entanglement
				remove_trait = trait_tec_hive_psionic_resonance
				# Special case
				remove_trait = trait_zombie
				effect = {
					create_species = {
						is_mod = yes
						name = this
						plural = this
						class = this
						portrait = this
						traits = this
						can_be_modified = this
						homeworld = this
						namelist = this
						gender = this
						traits = {
							ideal_planet_class = this
							trait = trait_tec_biopsionic_main
						}
					}
				}
			}
			save_event_target_as = changing_species
		}
	
		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
	tec_create_biopsionic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_biopsionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = {
					is_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_biopsionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		if = {
			limit = {
				is_hive_empire = no
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOT = {
								has_trait = trait_hive_mind
							}
							tec_has_ascension_main_trait = no
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOT = {
								has_trait = trait_hive_mind
							}
							tec_has_ascension_main_trait = no
						}
					}
					tec_create_biopsionic_species_mod = yes
				}
			}
		}

		else_if = {
			limit = {
				is_hive_empire = yes
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = no
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = no
						}
					}
					tec_create_biopsionic_species_mod = yes
				}
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_biopsionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_biopsionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						tec_create_biopsionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_robotic = no
					tec_has_ascension_main_trait = no
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					tec_create_biopsionic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_tec_biopsionic_main }
				NOR = {
					has_trait = leader_trait_admiral_tec_biopsionic
					has_trait = leader_trait_general_tec_biopsionic
					has_trait = leader_trait_governor_tec_biopsionic
					has_trait = leader_trait_scientist_tec_biopsionic
					has_trait = leader_trait_ruler_tec_biopsionic
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_tec_biopsionic_main }
				NOR = {
					has_trait = leader_trait_admiral_tec_biopsionic
					has_trait = leader_trait_general_tec_biopsionic
					has_trait = leader_trait_governor_tec_biopsionic
					has_trait = leader_trait_scientist_tec_biopsionic
					has_trait = leader_trait_ruler_tec_biopsionic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
		}
	}
 # Cyberpsionic
	tec_create_cyberpsionic_species_mod = {
		optimize_memory
		species = {
			modify_species = {
				# TO DO create inline
				remove_trait = trait_latent_psionic
				remove_trait = trait_psionic
				remove_trait = trait_cybernetic
				remove_trait = trait_tec_superior_cybernetics_main
				effect = {
					create_species = {
						is_mod = yes
						name = this
						plural = this
						class = this
						portrait = this
						traits = this
						can_be_modified = this
						homeworld = this
						namelist = this
						gender = this
						traits = {
							ideal_planet_class = this
							trait = trait_tec_cyberpsionic_main
						}
					}
				}
			}
			save_event_target_as = changing_species
		}
	
		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
	tec_create_cyberpsionic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_cyberpsionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = {
					is_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_cyberpsionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		if = {
			limit = {
				is_hive_empire = no
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOT = {
								has_trait = trait_hive_mind
							}
							tec_has_ascension_main_trait = no
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							NOT = {
								has_trait = trait_hive_mind
							}
							tec_has_ascension_main_trait = no
						}
					}
					tec_create_cyberpsionic_species_mod = yes
				}
			}
		}

		else_if = {
			limit = {
				is_hive_empire = yes
			}
			while = {
				limit = {
					any_owned_pop = {
						is_sapient = yes
						species = {
							is_robotic = no
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = no
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						species = {
							is_robotic = no
							has_trait = trait_hive_mind
							tec_has_ascension_main_trait = no
						}
					}
					tec_create_cyberpsionic_species_mod = yes
				}
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_cyberpsionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_cyberpsionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						is_robotic = no
						tec_has_ascension_main_trait = no
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						tec_create_cyberpsionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_robotic = no
					tec_has_ascension_main_trait = no
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					tec_create_cyberpsionic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = @trait_tec_cyberpsionic_main }
				NOR = {
					has_trait = leader_trait_admiral_tec_cyberpsionic
					has_trait = leader_trait_general_tec_cyberpsionic
					has_trait = leader_trait_governor_tec_cyberpsionic
					has_trait = leader_trait_scientist_tec_cyberpsionic
					has_trait = leader_trait_ruler_tec_cyberpsionic
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_tec_cyberpsionic
					has_trait = leader_trait_general_tec_cyberpsionic
					has_trait = leader_trait_governor_tec_cyberpsionic
					has_trait = leader_trait_scientist_tec_cyberpsionic
					has_trait = leader_trait_ruler_tec_cyberpsionic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
		}
	}
 # Bionic
	tec_create_bionic_species_mod = {	# TO DO
	}
	tec_create_bionic_species = {	# TO DO
	}
 # Biogenic
	tec_create_biogenic_species_mod = {	# TO DO
	}
	tec_create_biogenic_species = {	# TO DO
	}
 # Psychic
	tec_create_psychic_species_mod = {	# TO DO
	}
	tec_create_psychic_species = {	# TO DO
	}
# /

# Sub-effects
	tec_create_psionic_body_species = {
		every_owned_pop = {
			limit = {
				is_same_species = root
				tec_is_any_psionic_species = yes
			}
			species = {
				save_event_target_as = psionic_species
			}
			modify_species = {
				species = this
				add_trait = @trait_tec_psionic_body
			}
			if = {
				limit = {
					has_trait = trait_adaptive
				}
				modify_species = {
					species = this
					remove_trait = trait_adaptive
				}
			}
			if = {
				limit = {
					has_trait = trait_adaptive_lithoid
				}
				modify_species = {
					species = this
					remove_trait = trait_adaptive_lithoid
				}
			}
			if = {
				limit = {
					has_trait = trait_extremely_adaptive
				}
				modify_species = {
					species = this
					remove_trait = trait_extremely_adaptive
				}
			}
		}
		change_dominant_species = { species = event_target:psionic_species change_all = yes }
		every_owned_leader = {
			limit = {
				is_same_species = root
			}
			add_leader_traits_after_modification = yes
		}
	}

	tec_create_psionic_mind_species = {
		every_owned_pop = {
			limit = {
				is_same_species = root
				tec_is_any_psionic_species = yes
			}
			species = {
				save_event_target_as = psionic_species
			}
			modify_species = {
				species = this
				add_trait = @trait_tec_psionic_mind
			}
			if = {
				limit = {
					has_trait = trait_tec_dumb
				}
				modify_species = {
					species = this
					remove_trait = trait_tec_dumb
				}
			}
			if = {
				limit = {
					has_trait = trait_intelligent
				}
				modify_species = {
					species = this
					remove_trait = trait_intelligent
				}
			}
				#if = {
				#	limit = {
				#		has_trait = trait_erudite
				#	}
				#	modify_species = {
				#		species = this
				#		remove_trait = trait_erudite
				#	}
				#}
			if = {
				limit = {
					has_trait = @trait_tec_gene_brain
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_gene_brain
				}
			}
			if = {
				limit = {
					has_trait = @trait_tec_replicant_brain
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_replicant_brain
				}
			}
			if = {
				limit = {
					has_trait = @trait_tec_cyborg_brain
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_cyborg_brain
				}
			}
		}
		change_dominant_species = { species = event_target:psionic_species change_all = yes }
		every_owned_leader = {
			limit = {
				is_same_species = root
			}
			add_leader_traits_after_modification = yes
		}
	}

	tec_create_psionic_energy_species= {
		every_owned_pop = {
			limit = {
				is_same_species = root
				tec_is_any_psionic_species = yes
			}
			species = {
				save_event_target_as = psionic_species
			}
			modify_species = {
				species = this
				add_trait = @trait_tec_psionic_energy
			}
			if = {
				limit = {
					has_trait = @trait_tec_cyborg_specialist
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_cyborg_specialist
				}
			}
		}
		change_dominant_species = { species = event_target:psionic_species change_all = yes }
		every_owned_leader = {
			limit = {
				is_same_species = root
			}
			add_leader_traits_after_modification = yes
		}
	}

	tec_create_psionic_unity_species= {
		every_owned_pop = {
			limit = {
				is_same_species = root
				tec_is_any_psionic_species = yes
			}
			species = {
				save_event_target_as = psionic_species
			}
			modify_species = {
				species = this
				add_trait = @trait_tec_psionic_unity
			}
			if = {
				limit = {
					has_trait = trait_quarrelsome
				}
				modify_species = {
					species = this
					remove_trait = trait_quarrelsome
				}
			}
			if = {
				limit = {
					has_trait = trait_traditional
				}
				modify_species = {
					species = this
					remove_trait = trait_traditional
				}
			}
			if = {
				limit = {
					has_trait = @trait_tec_cyborg_intralink
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_cyborg_intralink
				}
			}
		}
		change_dominant_species = { species = event_target:psionic_species change_all = yes }
		every_owned_leader = {
			limit = {
				is_same_species = root
			}
			add_leader_traits_after_modification = yes
		}
	}

	tec_create_psionic_telekinesis_species= {
		every_owned_pop = {
			limit = {
				is_same_species = root
				tec_is_any_psionic_species = yes
			}
			species = {
				save_event_target_as = psionic_species
			}
			modify_species = {
				species = this
				add_trait = @trait_tec_psionic_telekinesis
			}
			if = {
				limit = {
					has_trait = @trait_tec_cyborg_worker
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_cyborg_worker
				}
			}
		}
		change_dominant_species = { species = event_target:psionic_species change_all = yes }
		every_owned_leader = {
			limit = {
				is_same_species = root
			}
			add_leader_traits_after_modification = yes
		}
	}

	tec_create_psionic_teleport_species= {
		every_owned_pop = {
			limit = {
				is_same_species = root
				tec_is_any_psionic_species = yes
			}
			species = {
				save_event_target_as = psionic_species
			}
			modify_species = {
				species = this
				add_trait = @trait_tec_psionic_teleport
			}
			if = {
				limit = {
					has_trait = trait_sedentary
				}
				modify_species = {
					species = this
					remove_trait = trait_sedentary
				}
			}
			if = {
				limit = {
					has_trait = trait_nomadic
				}
				modify_species = {
					species = this
					remove_trait = trait_nomadic
				}
			}
		}
		change_dominant_species = { species = event_target:psionic_species change_all = yes }
		every_owned_leader = {
			limit = {
				is_same_species = root
			}
			add_leader_traits_after_modification = yes
		}
	}

 # Synthetic dermis and nanite form fun
	tec_machine_organic_camouflage = {
		optimize_memory
		if = {
			limit = {
				root = {
					species_portrait = sd_hum_robot
				}
			}
			if = {
				limit = {
					NOT = {
						root = {
								is_human_species = yes
							}
						}
					}
				modify_species = {
					portrait = human
				}
			}
			else = {
				modify_species = {
					portrait = human
				}
			}
		}

		if = {
			limit = {
				root = {
					species_portrait = sd_mam_robot
				}
			}
			if = {
				limit = {
					NOT = {
						root = {
							species_portrait = mam1
							}
						}
					}
				modify_species = {
					portrait = mam1
				}
			}
			else = {
				modify_species = {
					portrait = mam1
				}
			}
		}

		if = {
			limit = {
				root = {
					species_portrait = sd_rep_robot
				}
			}
			if = {
				limit = {
					NOT = {
						root = {
							species_portrait = rep1
							}
						}
					}
				modify_species = {
					portrait = rep1
				}
			}
			else = {
				modify_species = {
					portrait = rep1
				}
			}
		}

		else = {
			modify_species = {
				portrait = nec1
			}
		}
		
	}

 # -	SPECIAL TRAIT MECHANICS - 
	tec_pure_brain_leader_effect = {
		optimize_memory
		# 200	475		825		1250	1750	2325	2975	3700	4500
		if = {
			limit = {
				from = {
					has_level = 2
				}
			}
			add_experience = 200
		}
		else_if = {
			limit = {
				from = {
					has_level = 3
				}
			}
			add_experience = 475
		}
		else_if = {
			limit = {
				from = {
					has_level = 4
				}
			}
			add_experience = 825
		}
		else_if = {
			limit = {
				from = {
					has_level = 5
				}
			}
			add_experience = 1250
		}
		else_if = {
			limit = {
				from = {
					has_level = 6
				}
			}
			add_experience = 1750
		}
		else_if = {
			limit = {
				from = {
					has_level = 7
				}
			}
			add_experience = 2325
		}
		else_if = {
			limit = {
				from = {
					has_level = 8
				}
			}
			add_experience = 2975
		}
		else_if = {
			limit = {
				from = {
					has_level = 9
				}
			}
			add_experience = 3700
		}
		else_if = {
			limit = {
				from = {
					has_level = 10
				}
			}
			add_experience = 4500
		}

	}
# /

# BACKUP Ascension paths
 # Latent Psionic
	OLD_tec_create_latent_psionic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
				}
			}
			random_owned_pop = {
				limit = { is_exact_same_species = root }
				tec_create_latent_psionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = { is_same_species = root }
				tec_create_latent_psionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		while = {
			limit = {
				any_owned_pop = {
					is_sapient = yes
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_pop = {
				limit = {
					is_sapient = yes
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				create_cybernetic_species_mod = yes
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					NOR = {
						has_trait = @trait_tec_replicant_main
						has_trait = @trait_tec_superior_cybernetics_main
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}
	}
	OLD_tec_create_latent_psionic_species_mod = {
		species = {
			create_species = {
				is_mod = yes
				name = this
				plural = this
				class = this
				portrait = this
				traits = this
				can_be_modified = this
				homeworld = this
				namelist = this
				gender = this
				traits = {
					ideal_planet_class = this
					trait = trait_cybernetic
				}
			}
			save_event_target_as = changing_species
		}

		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
 # Psionic

 # Cybernetic
	OLD_tec_create_genetic_perfection_species_mod = {
		optimize_memory

		# PRE STEPS
		if = {	# Necrophage special events
			limit = {
				has_origin = origin_necrophage
				has_country_flag = tec_gene_necrophage_evolved
			}
			modify_species = {
				remove_trait = trait_necrophage
				add_trait = @trait_tec_necroborn
				add_traits_at_start_of_list = yes
				effect = {
					root = {
						change_dominant_species = {
							species = prev
						}
					}
				}
			}
			owner_main_species = {
				every_galaxy_species = {
					limit = {
						is_same_species = prev
						NOT = { is_same_value = prev }
						has_trait = trait_necrophage
						NOR = {
							any_country = {
								NOT = { is_same_value = root }
								owner_main_species = {
									is_same_value = prevprev
								}
							}
							any_species_pop = {
								NOT = { is_owned_by = root }
							}
						}
					}
					change_species_characteristics = {
						remove_trait = trait_necrophage
						add_trait = @trait_tec_necroborn
						add_traits_at_start_of_list = yes
					}
				}
			}
			remove_country_flag = tec_gene_necrophage_evolved
		}
		if = {	# Elder Guidance
			limit = {
				has_origin = origin_syncretic_evolution
				has_country_flag = tec_gene_elder_cured
			}
			modify_species = {
				remove_trait = @trait_tec_se_elder
				add_trait = @trait_tec_se_subspecies
				add_traits_at_start_of_list = yes
				effect = {
					root = {
						change_dominant_species = {
							species = prev
						}
					}
				}
			}
			owner_main_species = {
				every_galaxy_species = {
					limit = {
						is_same_species = prev
						NOT = { is_same_value = prev }
						has_trait = @trait_tec_se_elder
						NOR = {
							any_country = {
								NOT = { is_same_value = root }
								owner_main_species = {
									is_same_value = prevprev
								}
							}
							any_species_pop = {
								NOT = { is_owned_by = root }
							}
						}
					}
					change_species_characteristics = {
						remove_trait = @trait_tec_se_elder
						add_trait = @trait_tec_se_subspecies
						add_traits_at_start_of_list = yes
					}
				}
			}
			remove_country_flag = tec_gene_necrophage_evolved
		}

		# Main modification
		species = {
			save_event_target_as = changing_species
			create_species = {
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = this
				portrait = this
				traits = this
				can_be_modified = yes
				gender = this
				homeworld = root.capital_scope
				traits = {
					ideal_planet_class = pc_tec_gene
				}

				effect = {
					save_event_target_as = tec_biospecies
					rename_species = {
						prompt_country = root
						name_list = ascension_list
					}
				}
			}
		}
		
		change_dominant_species = { species = event_target:tec_biospecies }

		every_owned_pop = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = event_target:tec_biospecies
			hidden_effect = {
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full
					cooldown = no
				}
			}
		}
		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = event_target:tec_biospecies
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_leader = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = event_target:tec_biospecies
		}
		every_pool_leader = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = event_target:tec_biospecies
		}
		every_envoy = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = event_target:tec_biospecies
		}
	}

	OLD_tec_create_cybernetic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
				}
			}
			random_owned_pop = {
				limit = { is_exact_same_species = root }
				create_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = { is_same_species = root }
				create_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		while = {
			limit = {
				any_owned_pop = {
					is_sapient = yes
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_pop = {
				limit = {
					is_sapient = yes
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				create_cybernetic_species_mod = yes
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						NOR = {
							#is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					NOR = {
						has_trait = @trait_tec_replicant_main
						has_trait = @trait_tec_superior_cybernetics_main
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}
	}

	OLD_tec_create_cybernetic_species_backup = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
				}
			}
			random_owned_pop = {
				limit = { is_exact_same_species = root }
				create_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = { is_same_species = root }
				create_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		while = {
			limit = {
				any_owned_pop = {
					is_sapient = yes
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_pop = {
				limit = {
					is_sapient = yes
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				create_cybernetic_species_mod = yes
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						NOR = {
							has_trait = trait_cybernetic
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					NOR = {
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}
	}

	OLD_tec_create_advanced_cybernetic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
				}
			}
			random_owned_pop = {
				limit = { is_exact_same_species = root }
				create_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = { is_same_species = root }
				create_cybernetic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		while = {
			limit = {
				any_owned_pop = {
					is_sapient = yes
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_pop = {
				limit = {
					is_sapient = yes
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				create_cybernetic_species_mod = yes
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						create_cybernetic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					NOR = {
						has_trait = @trait_tec_replicant_main
						has_trait = @trait_tec_superior_cybernetics_main
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_cyborg
				add_ruler_trait = leader_trait_ruler_cyborg
			}
		}
	}

	OLD_tec_create_advanced_cybernetic_species_ap = {
		optimize_memory
		modify_species = {
			species = this
			add_trait = @trait_tec_superior_cybernetics_main
			add_traits_at_start_of_list = yes
			remove_trait = trait_cybernetic
			change_scoped_species = no
			effect = {
				root = {
					every_owned_pop = {
						limit = {
							is_same_species = prevprevprev
							tec_has_stapled_trait = no
						}
						change_species = prevprev
					}
					
					every_owned_leader = {
						limit = {
							is_same_species = prevprevprev
							tec_has_stapled_trait = no
						}
						change_species = prevprev
						add_leader_traits_after_modification = yes
						remove_leader_traits_after_modification = yes
					}
					every_pool_leader = {
						limit = {
							is_same_species = prevprevprev
							tec_has_stapled_trait = no
						}
						change_species = prevprev
						add_leader_traits_after_modification = yes
						remove_leader_traits_after_modification = yes
					}

					every_owned_army = {
						limit = {
							is_same_species = prevprevprev
							species = { tec_has_stapled_trait = no }
						}
						modify_army = {
							species = prevprev
						}
					}
					every_controlled_ship = {
						limit = {
							is_ship_class = shipclass_colonizer
							species = {
								is_same_species = prevprevprev
								tec_has_stapled_trait = no
							}
						}
						change_species = prevprev
						#	change_species = event_target:new_replicant_species
					}
				}
			}
		}
	}

	OLD_tec_create_cyberpsionic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
			}
			random_owned_pop = {
				limit = {
					is_exact_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_cyberpsionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = {
					is_same_species = root
					tec_has_stapled_trait = no
				}
				tec_create_cyberpsionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		while = {
			limit = {
				any_owned_pop = {
					is_sapient = yes
					tec_has_stapled_trait = no
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_pop = {
				limit = {
					is_sapient = yes
					tec_has_stapled_trait = no
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				tec_create_cyberpsionic_species_mod = yes
			}
		}

		while = {
			limit = {
				any_owned_leader = {
					species = {
						tec_has_stapled_trait = no
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_leader = {
				limit = {
					species = {
						tec_has_stapled_trait = no
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_cyberpsionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_pool_leader = {
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_pool_leader = {
				limit = {
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev
					}
					last_created_pop = {
						tec_create_cyberpsionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		while = {
			limit = {
				any_owned_army = {
					exists = species
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
			}
			random_owned_army = {
				limit = {
					exists = species
					species = {
						NOR = {
							is_same_value = event_target:new_main_species
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
							has_trait = @trait_tec_replicant_main
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
							has_trait = leader_trait_curator
						}
					}
				}
				root.capital_scope = { #workaround to prevent main species from accidentally flipping
					create_pop = {
						species = prev.species
					}
					last_created_pop = {
						tec_create_cyberpsionic_species_mod = yes
						kill_pop = yes
					}
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_superior_cybernetics_main
						has_trait = @trait_tec_cyberpsionic_main
						has_trait = @trait_tec_replicant_main
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					tec_create_cyberpsionic_species_mod = yes
					kill_pop = yes
				}
			}
		}

		every_owned_leader = {
			limit = {
				species = { has_trait = @trait_tec_cyberpsionic_main }
				NOR = {
					has_trait = leader_trait_admiral_tec_cyberpsionic
					has_trait = leader_trait_general_tec_cyberpsionic
					has_trait = leader_trait_governor_tec_cyberpsionic
					has_trait = leader_trait_scientist_tec_cyberpsionic
					has_trait = leader_trait_ruler_tec_cyberpsionic
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_cybernetic }
				NOR = {
					has_trait = leader_trait_admiral_tec_cyberpsionic
					has_trait = leader_trait_general_tec_cyberpsionic
					has_trait = leader_trait_governor_tec_cyberpsionic
					has_trait = leader_trait_scientist_tec_cyberpsionic
					has_trait = leader_trait_ruler_tec_cyberpsionic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_cyberpsionic
				add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
			}
		}
	}
	OLD_tec_create_cyberpsionic_species_mod = {
		optimize_memory
		species = {
			create_species = {
				is_mod = yes
				name = this
				plural = this
				class = this
				portrait = this
				traits = this
				homeworld = this
				namelist = this
				can_be_modified = yes
				gender = this
				traits = {
					ideal_planet_class = this
					trait = @trait_tec_cyberpsionic_main
				}
				effect = {
					save_event_target_as = tec_new_cyberpsionic_species
					save_event_target_as = changing_species
				}
			}
		}

		if = {	# Trait cleanup
			limit = {
				event_target:tec_new_cyberpsionic_species = {
					OR = {
						# Cybernetic
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
						# /
						# Psionic
							has_trait = trait_latent_psionic
							has_trait = trait_psionic

							has_trait = @trait_tec_hive_psionic_resonance
							has_trait = @trait_tec_hive_psionic_entanglement

							has_trait = @trait_tec_biopsionic_main
						# /
					}
				}
			}
			modify_species = {
				species = event_target:tec_new_cyberpsionic_species
				# Cybernetic
					remove_trait = trait_cybernetic
					remove_trait = @trait_tec_superior_cybernetics_main
				# /
				# Psionic
					remove_trait = trait_latent_psionic
					remove_trait = trait_psionic

					remove_trait = @trait_tec_hive_psionic_resonance
					remove_trait = @trait_tec_hive_psionic_entanglement

					remove_trait = @trait_tec_biopsionic_main
				# /
				change_scoped_species = no
				effect = {
					save_event_target_as = tec_new_cyberpsionic_species
					
				}
			}
		}

		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = event_target:tec_new_cyberpsionic_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = event_target:tec_new_cyberpsionic_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = event_target:tec_new_cyberpsionic_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = event_target:tec_new_cyberpsionic_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = event_target:tec_new_cyberpsionic_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = event_target:tec_new_cyberpsionic_species
			}
		}
	}

	OLD_tec_create_synth_species = {
		if = {
			limit = {
				has_policy_flag = robots_outlawed
			}
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = yes
			}
		}
		if = {
			limit = {
				OR = {
					has_policy_flag = ai_servitude
					has_policy_flag = ai_outlawed
				}
			}
			set_policy = {
				policy = artificial_intelligence_policy
				option = ai_full_rights
				cooldown = yes
			}
		}
		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_divinity_silence_the_soulless"
					is_active_resolution = "resolution_divinity_a_defined_purpose"
				}
			}
			owner = {
				set_timed_country_flag = { flag = resolution_breached_synthetic_evolution days = 3600 }
			}
		}

		give_technology = { tech = tech_bio_reactor message = no }
		# Saves the species rights
			if = {
				limit = {
					owner_species = {
						has_living_standard = {
							type = living_standard_utopian
						}
					}
					
				}
				root = {
					set_country_flag = tec_sa_utopian
				}
			}
			if = {
				limit = {
					owner_species = {
						has_living_standard = {
							type = living_standard_academic_privilege
						}
					}
					
				}
				root = {
					set_country_flag = tec_sa_academic
				}
			}
			if = {
				limit = {
					owner_species = {
						has_living_standard = {
							type = living_standard_chemical_bliss
						}
					}
					
				}
				root = {
					set_country_flag = tec_sa_chem
				}
			}
			if = {
				limit = {
					owner_species = {
						has_living_standard = {
							type = living_standard_good
						}
					}
				}
				root = {
					set_country_flag = tec_sa_good
				}
			}
			if = {
				limit = {
					owner_species = {
						has_living_standard = {
							type = living_standard_normal
						}
					}
				}
				root = {
					set_country_flag = tec_sa_normal
				}
			}
			if = {
				limit = {
					owner_species = {
						has_living_standard = {
							type = living_standard_shared_burden
						}
					}
				}
				root = {
					set_country_flag = tec_sa_shared
				}
			}
			if = {
				limit = {
					owner_species = {
						has_living_standard = {
							type = living_standard_stratified
						}
					}
				}
				root = {
					set_country_flag = tec_sa_stratified
				}
			}
			if = {
				limit = {
					owner_species = {
						has_living_standard = {
							type = living_standard_subsistence
						}
					}
				}
				root = {
					set_country_flag = tec_sa_poor
				}
			}
		# /	

		# Executes the robomorphosis
		if = {
			limit = {
				has_country_flag = tec_synth_use_robots
			}
			random_owned_species = {
				limit = {
					has_species_flag = tec_synth_host_species_@root
				}
				save_event_target_as = new_robotic_species
			}
		}
		else = {
			create_species = {
				# technically its applied at modification to avoid purifiers strange interactions, lets see...
				is_mod = yes
				name = this
				namelist = this
				plural = this
				class = "ROBOT"
				portrait = "default_robot"
				traits = {
					trait = "trait_mechanical"
				}
		
				effect = {
					if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
						prev = {
							switch = {
								trigger = is_species_class
								HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } }}
								MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } }}
								REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } }}
								AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } }}
								ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } }}
								MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } }}
								FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } }}
								PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } }}
								LITHOID = { prev = { change_species_characteristics = { portrait = "lith_machine" } }}
								NECROID = { prev = { change_species_characteristics = { portrait = "nec_machine" } }}
								AQUATIC = { prev = { change_species_characteristics = { portrait = "aqu_machine" } }}
								TOX = { prev = { change_species_characteristics = { portrait = "tox_machine" } } }
							}
						}
					}
		
					rename_species = {
						prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
						name_list = ascension_list
					}
		
					save_event_target_as = new_robotic_species
				}
			}
		}

		# Extra bonuses
		if = {
			limit = {
				is_lithoid_empire = no
				has_country_flag = tec_synth_slow_transition
			}
			event_target:new_robotic_species = {
				modify_species = {
					add_trait = trait_tec_machine_biobrain
					effect = {
						save_event_target_as = new_robotic_species
					}
				}
			}
		}
		
		change_dominant_species = { species = event_target:new_robotic_species }

		# Extracheck, to be sure
			if = {
				limit = {
					has_policy_flag = robots_outlawed
				}
				set_policy = {
					policy = robot_pop_policy
					option = robot_pops_allowed
					cooldown = yes
				}
			}
			if = {
				limit = {
					OR = {
						has_policy_flag = ai_servitude
						has_policy_flag = ai_outlawed
					}
				}
				set_policy = {
					policy = artificial_intelligence_policy
					option = ai_full_rights
					cooldown = yes
				}
			}
		# /

		# Applies to pops
			every_owned_pop = {
				limit = {
					is_being_purged = no
					species = {
						is_livestock = no
						OR = {
							has_trait = trait_cybernetic
							is_same_species = owner_main_species
						}
					}
				}
				change_species = event_target:new_robotic_species
			}

			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					species = {
						is_livestock = no
						OR = {
							has_trait = trait_cybernetic
							is_same_value = owner_species
						}
					}
				}
				change_species = event_target:new_robotic_species
			}

			every_owned_army = {
				limit = {
					exists = species
					exists = planet
					species = {
						is_livestock = no
						OR = {
							has_trait = trait_cybernetic
							is_same_value = owner_species
						}
					}
					army_type = assault_army
				}
				modify_army = {
					name = random
					type = "robotic_army"
					species = event_target:new_robotic_species
				}
			}

			every_owned_army = {
				limit = {
					exists = species
					exists = planet
					species = {
						is_livestock = no
						OR = {
							has_trait = trait_cybernetic
							is_same_value = owner_species
						}
					}
					army_type = defense_army
				}
				modify_army = {
					name = random
					type = "robotic_defense_army"
					species = event_target:new_robotic_species
				}
			}
			every_owned_leader = {
				limit = {
					species = {
						is_livestock = no
					}
					OR = {
						has_trait = leader_trait_admiral_synthetic
						has_trait = leader_trait_ruler_synthetic
						has_trait = leader_trait_general_synthetic
						has_trait = leader_trait_governor_synthetic
						has_trait = leader_trait_scientist_synthetic
						species = {
							is_same_value = owner_species
						}
					}
				}
				change_species = event_target:new_robotic_species
				change_leader_portrait = species
			}
			every_pool_leader = {
				limit = {
					species = {
						is_livestock = no
					}
					OR = {
						has_trait = leader_trait_admiral_synthetic
						has_trait = leader_trait_ruler_synthetic
						has_trait = leader_trait_general_synthetic
						has_trait = leader_trait_governor_synthetic
						has_trait = leader_trait_scientist_synthetic
						species = {
							is_same_value = owner_species
						}
					}
				}
				change_species = event_target:new_robotic_species
				change_leader_portrait = species
			}
			every_envoy = {
				limit = { 
					species = {
						is_livestock = no
						NOT = {
							has_trait = trait_mechanical
						}
					}
				}
				change_species = event_target:new_robotic_species
				change_leader_portrait = species
			}
			every_owned_leader = {
				limit = {
					species = { has_trait = trait_mechanical }
					NOR = {
						has_trait = leader_trait_admiral_synthetic
						has_trait = leader_trait_general_synthetic
						has_trait = leader_trait_governor_synthetic
						has_trait = leader_trait_scientist_synthetic
						has_trait = leader_trait_ruler_synthetic
					}
				}
				if = {
					limit = { leader_class = admiral }
					add_trait = leader_trait_admiral_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_admiral_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				if = {
					limit = { leader_class = general }
					add_trait = leader_trait_general_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_general_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				if = {
					limit = { leader_class = governor }
					add_trait = leader_trait_governor_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_governor_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				if = {
					limit = { leader_class = scientist }
					add_trait = leader_trait_scientist_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_scientist_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				if = {
					limit = { leader_class = ruler }
					add_trait = leader_trait_ruler_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_ruler_cyborg
				}
			}
			every_pool_leader = {
				limit = {
					species = { has_trait = trait_mechanical }
					NOR = {
						has_trait = leader_trait_admiral_synthetic
						has_trait = leader_trait_general_synthetic
						has_trait = leader_trait_governor_synthetic
						has_trait = leader_trait_scientist_synthetic
						has_trait = leader_trait_ruler_synthetic
					}
				}
				if = {
					limit = { leader_class = admiral }
					add_trait = leader_trait_admiral_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_admiral_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				if = {
					limit = { leader_class = general }
					add_trait = leader_trait_general_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_general_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				if = {
					limit = { leader_class = governor }
					add_trait = leader_trait_governor_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_governor_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				if = {
					limit = { leader_class = scientist }
					add_trait = leader_trait_scientist_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_scientist_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				if = {
					limit = { leader_class = ruler }
					add_trait = leader_trait_ruler_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_ruler_cyborg
				}
			}
			
		# /
	}

	OLD_tec_create_replicant_species = {
		optimize_memory
		modify_species = {
			species = this
			ideal_planet_class = pc_nuked
			
			effect = {
				modify_species = {
					species = this
					remove_trait = trait_pc_nuked_preference
					
					effect = {
						create_species = {
							is_mod = yes
							name = this
							namelist = this
							plural = this
							class = "REPLICANT"
							portrait = this
							can_be_modified = yes
							gender = this
							homeworld = root.capital_scope
							traits = {
								trait = @trait_tec_replicant_main
							}
							traits = this
							effect = {
								rename_species = {
									prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
									name_list = ascension_list
								}
								save_event_target_as = tec_replicant_species
							}
						}
					}
				}
			}
		}
		
		if = {	# Trait cleanup
			limit = {
				event_target:tec_replicant_species = {
					OR = {
						# Origin traits
							has_trait = trait_necrophage

							has_trait = trait_clone_soldier_fertile
							has_trait = trait_clone_soldier_infertile
							has_trait = trait_clone_soldier_infertile_full_potential

							has_trait = trait_tec_se_elder
						# /
						# Cyborgs
							has_trait = trait_cybernetic
							has_trait = @trait_tec_superior_cybernetics_main
							has_trait = @trait_tec_cyberpsionic_main
						# /
						# Synths
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						# /
					}
				}
			}
			modify_species = {
				species = event_target:tec_replicant_species
				# Origin traits
					remove_trait = trait_necrophage

					remove_trait = trait_clone_soldier_fertile
					remove_trait = trait_clone_soldier_infertile
					remove_trait = trait_clone_soldier_infertile_full_potential

					remove_trait = trait_tec_se_elder
				# /
				# Cyborgs
					remove_trait = trait_cybernetic
					remove_trait = @trait_tec_superior_cybernetics_main
					remove_trait = @trait_tec_cyberpsionic_main
				# /
				# Synths
					remove_trait = trait_mechanical
					remove_trait = trait_machine_unit
				# /
				change_scoped_species = no
				effect = {
					save_event_target_as = tec_replicant_species
				}
			}
		}

		# Saves flags
		owner_main_species = {
			save_event_target_as = tec_target_species
			set_species_flag = tec_prereplicant_species_of_@event_target:tec_replicant_species
		}

		event_target:tec_replicant_species = {
			set_species_flag = tec_replicant_species_of_@event_target:tec_target_species
		}

		every_owned_pop = {
			limit = { is_same_species = root }
			change_species = event_target:tec_replicant_species
			hidden_effect = {
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full
					cooldown = no
				}
			}
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					is_same_species = root
				}
			}
			change_species = event_target:tec_replicant_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					is_same_species = root
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				species = event_target:tec_replicant_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					is_same_species = root
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				species = event_target:tec_replicant_species
			}
		}

		every_owned_leader = {
			limit = {
				is_same_species = root
			}
			change_species = event_target:tec_replicant_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = {
				is_same_species = root
			}
			change_species = event_target:tec_replicant_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:tec_replicant_species }

		every_owned_leader = {
			limit = {
				species = {
					is_same_value = event_target:tec_replicant_species
				}
				NOR = {
					has_trait = leader_trait_admiral_tec_replicant
					has_trait = leader_trait_general_tec_replicant
					has_trait = leader_trait_governor_tec_replicant
					has_trait = leader_trait_scientist_tec_replicant
					has_trait = leader_trait_ruler_tec_replicant
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		every_pool_leader = {
			limit = {
				species = {
					is_same_value = event_target:tec_replicant_species
				}
				NOR = {
					has_trait = leader_trait_admiral_tec_replicant
					has_trait = leader_trait_general_tec_replicant
					has_trait = leader_trait_governor_tec_replicant
					has_trait = leader_trait_scientist_tec_replicant
					has_trait = leader_trait_ruler_tec_replicant
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_replicant
				add_ruler_trait = leader_trait_ruler_tec_replicant
				remove_trait = leader_trait_ruler_cyborg
			}
		}
	}

	OLD_tec_create_biopsionic_species = {
		optimize_memory
		if = {
			limit = {
				any_owned_pop = {
					is_exact_same_species = root
				}
			}
			random_owned_pop = {
				limit = { is_exact_same_species = root }
				tec_create_biopsionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		else = {
			random_owned_pop = {
				limit = { is_same_species = root }
				tec_create_biopsionic_species_mod = yes
				species = { save_event_target_as = new_main_species }
			}
		}
		change_dominant_species = { species = event_target:new_main_species }

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_tec_biopsionic_main }
				NOR = {
					has_trait = leader_trait_admiral_tec_biopsionic
					has_trait = leader_trait_general_tec_biopsionic
					has_trait = leader_trait_governor_tec_biopsionic
					has_trait = leader_trait_scientist_tec_biopsionic
					has_trait = leader_trait_ruler_tec_biopsionic
					has_trait = leader_trait_curator
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
		}

		every_pool_leader = {
			limit = {
				species = { has_trait = trait_tec_biopsionic_main }
				NOR = {
					has_trait = leader_trait_admiral_tec_biopsionic
					has_trait = leader_trait_general_tec_biopsionic
					has_trait = leader_trait_governor_tec_biopsionic
					has_trait = leader_trait_scientist_tec_biopsionic
					has_trait = leader_trait_ruler_tec_biopsionic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_tec_biopsionic
				add_ruler_trait = leader_trait_ruler_tec_biopsionic
			}
		}
	}
	OLD_tec_create_biopsionic_species_mod = {
		species = {
			create_species = {
				is_mod = yes
				name = this
				plural = this
				class = this
				portrait = this
				traits = this
				can_be_modified = this
				namelist = this
				gender = this
				traits = {
					trait = trait_tec_biopsionic_main
				}
				effect = {
					modify_species = {
						change_scoped_species = no
						remove_trait = trait_latent_psionic
						remove_trait = trait_psionic
						remove_trait = @trait_tec_hive_psionic_entanglement
						remove_trait = @trait_tec_hive_psionic_resonance
						remove_trait = @trait_tec_cyberpsionic_main
						effect = {
							save_event_target_as = changing_species
						}
					}
				}
			}
		}

		owner = {
			every_owned_pop = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_exact_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_exact_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
# /



# Note: Temp remove trait effects for each block
	#	# Cybernetic block
	#		remove_trait = trait_cybernetic
	#			remove_trait = trait_cyborg_power_drills
	#			remove_trait = trait_cyborg_harvesters
	#			remove_trait = trait_cyborg_superconductive
	#			remove_trait = trait_cyborg_efficient_processors
	#			remove_trait = trait_cyborg_logic_engines
	#			remove_trait = trait_cyborg_loyalty_circuits
	#			remove_trait = trait_cyborg_double_jointed
	#			remove_trait = trait_cyborg_bulky
	#			remove_trait = trait_cyborg_enhanced_memory
	#			remove_trait = trait_cyborg_durable
	#			remove_trait = trait_cyborg_high_maintenance
	#			remove_trait = trait_cyborg_learning_algorithms
	#			remove_trait = trait_cyborg_power_intensive
	#			remove_trait = trait_cyborg_neural_limiters
	#			remove_trait = trait_cyborg_streamlined_protocols
	#			remove_trait = trait_cyborg_high_bandwidth
	#			remove_trait = trait_cyborg_trading_algorithms
	#	# /
	#	# Adv Cyb block
	#		remove_trait = trait_tec_superior_cybernetics_main
	#			remove_trait = trait_tec_cyborg_bioimplants
	#			remove_trait = trait_tec_cyborg_brain
	#			remove_trait = trait_tec_cyborg_databank
	#			remove_trait = trait_tec_cyborg_endo
	#			remove_trait = trait_tec_cyborg_endo_2
	#			remove_trait = trait_tec_cyborg_extralimbs
	#			remove_trait = trait_tec_cyborg_fashion
	#			remove_trait = trait_tec_cyborg_intralink
	#			remove_trait = trait_tec_cyborg_mecha
	#			remove_trait = trait_tec_cyborg_mindless
	#			remove_trait = trait_tec_cyborg_selfmaintenance
	#			remove_trait = trait_tec_cyborg_specialist
	#			remove_trait = trait_tec_cyborg_worker
	#	# /
	#	# Cyberpsionic block
	#		remove_trait = trait_tec_cyberpsionic_main
	#			remove_trait = trait_tec_cyberpsionic_amplifier
	#			remove_trait = trait_tec_cyberpsionic_control
	#			remove_trait = trait_tec_cyberpsionic_endoskeleton
	#			remove_trait = trait_tec_cyberpsionic_equilibrium
	#			remove_trait = trait_tec_cyberpsionic_infusion
	#			remove_trait = trait_tec_cyberpsionic_power
	#	# /
# /