# common\scripted_effects\zz_evolved_leader_effects.txt

# Trait flags
tec_roll_cerebrate_leader_trait_flags = {
	if = {
		limit = { leader_class = admiral }
		# TO DO new variants
	}
	else_if = {
		limit = { leader_class = scientist }
		random_list = {
			1 = {
				set_leader_flag = tec_sci_roll_assist
			}
			1 = {
				set_leader_flag = tec_sci_roll_phy
			}
			1 = {
				set_leader_flag = tec_sci_roll_soc
			}
			1 = {
				set_leader_flag = tec_sci_roll_eng
			}
			1 = {
				set_leader_flag = tec_sci_roll_uni
			}
		}
	}
	else_if = {
		limit = { leader_class = general }
	}
	else_if = {
		limit = { leader_class = governor }
		random_list = {
			1 = {
				set_leader_flag = tec_gov_roll_sta
			}
			1 = {
				set_leader_flag = tec_gov_roll_pop
			}
		}
	}
	else = {
		break = yes
	}
}

# scope: leader
tec_leader_add_councilor_trait = {
	if = {
		limit = {
			has_paragon_dlc = yes
		}
		switch = {
			trigger = leader_class
			admiral = {
				add_trait_no_notify = subclass_admiral_strategist
			}
			scientist = {
				add_trait_no_notify = subclass_scientist_researcher
			}
			general = {
				add_trait_no_notify = subclass_general_marshall
			}
			governor = {
				add_trait_no_notify = subclass_governor_visionary
			}
		}
	}
}


# scope: leader
tec_leader_aiauth_add_experience = {
	add_trait = trait_tec_aiauth_fix_xp
	add_experience = $amount$
	remove_trait = trait_tec_aiauth_fix_xp
}

# scope: leader
tec_leader_remove_psionic_traits = {
	remove_trait = leader_trait_psionic
	remove_trait = leader_trait_tec_cyberpsionic_main
	remove_trait = leader_trait_tec_biopsionic_main
	# remove_trait = leader_trait_tec_robot_shroud
	# remove_trait = leader_trait_tec_hive_psionic
}

# scope: leader
# from: country
tec_leader_handle_starting_modifiers = {
	$from$ = {
		fire_on_action = {
			on_action = tec_leader_starting_actions
			scopes = {
				from = prev
			}
		}
	}
	set_leader_flag = tec_first_leader_handle_starting_modifiers_done
}

# scope: country
tec_country_leaders_handle_starting_modifiers = {
	every_owned_leader = {
		tec_leader_handle_starting_modifiers = {
			from = prev
		}
	}
	every_pool_leader = {
		tec_leader_handle_starting_modifiers = {
			from = prev
		}
	}
}