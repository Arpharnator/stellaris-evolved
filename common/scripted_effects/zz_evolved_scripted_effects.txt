tec_cache = {
	if = {
		limit = { 
			$trigger$ = yes
		}
		set_$scope$_flag = tec_cache_$trigger$
	} else = {
		remove_$scope$_flag = tec_cache_$trigger$
	}
}

tec_cache_value = {
	set_variable = {
		which = tec_cache_$value$
		value = value:$value$
	}
}

tec_cache_planet_type_triggers = {
	tec_cache = {
		scope = planet
		trigger = tec_is_arcology
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_space_arcology
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_habitat
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_ringworld
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_elysium
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_city_world
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_perfect_planet
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_neutral_planet
	}

	tec_cache = {
		scope = planet
		trigger = tec_has_all_slots_unlocked
	}

	# planet job swaps

	tec_cache = {
		scope = planet
		trigger = tec_pd_has_crucible_foundry
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_special_foundry
	}

	tec_cache = {
		scope = planet
		trigger = tec_has_scrap_miner
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_matter_miner
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_special_miner
	}

	tec_cache = {
		scope = planet
		trigger = tec_pd_has_scrap_technicians
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_special_technician
	}

}

tec_cache_capital_triggers = {
	tec_cache = {
		scope = planet
		trigger = tec_has_t1_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t2_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t3_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t4_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t5_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_imperial_capital
	}
	
	tec_cache_value = {
		value = tec_capital_tier
	}
}

tec_cache_colony_triggers = {
	
}

tec_cache_planet_scope_triggers = {
	tec_cache_planet_type_triggers = yes
	tec_cache_capital_triggers = yes
	tec_cache_colony_triggers = yes
}

tec_cache_shackled_triggers = {
	tec_cache = {
		scope = pop
		trigger = tec_is_shackled_robot
	}
	tec_cache = {
		scope = pop
		trigger = tec_is_non_sapient_robot
	}
	tec_cache = {
		scope = pop
		trigger = tec_is_shackled_bioservant
	}
	
	tec_cache = {
		scope = pop
		trigger = tec_is_non_sapient_bioservant
	}
}


tec_cache_pop_triggers = {
	tec_cache = {
		scope = pop
		trigger = tec_purge_pop_category_trigger
	}
	tec_cache = {
		scope = pop
		trigger = tec_has_stapled_trait
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_slave
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_worker
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_worker_only
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_specialist
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_specialist_only
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_simple_drone
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_complex_drone
	}
}

tec_cache_species_traits_triggers = {
	tec_cache = {
		scope = species
		trigger = tec_has_stapled_trait
	}
	
	tec_cache = {
		scope = species
		trigger = tec_has_ruler_job_invalidation_trait
	}
}

tec_cache_country_monthly_triggers = {
	if = {
		limit = {
			is_regular_empire = yes
		}
		tec_cache = {
			scope = country
			trigger = tec_xeno_any_genocided_our_species
		}
		tec_cache = {
			scope = country
			trigger = tec_xeno_we_genocided_any
		}
		tec_cache = {
			scope = country
			trigger = tec_xeno_any_enslaved_us
		}
		tec_cache = {
			scope = country
			trigger = tec_militarist_any_own_our_planets
		}
		tec_cache = {
			scope = country
			trigger = tec_found_guardian
		}

		# values
		tec_cache_value = {
			value = authoritarian_ethics_from_relations
		}
		tec_cache_value = {
			value = egalitarian_ethics_from_relations
		}
		tec_cache_value = {
			value = xenophobe_ethics_from_relations
		}
		tec_cache_value = {
			value = xenophile_ethics_from_relations
		}
		tec_cache_value = {
			value = spiritualist_ethics_from_relations
		}
		tec_cache_value = {
			value = materialist_ethics_from_relations
		}
		tec_cache_value = {
			value = pacifist_ethics_from_pacts
		}
		tec_cache_value = {
			value = tec_cooperative_ethics_from_relations
		}
		tec_cache_value = {
			value = tec_competitive_ethics_from_relations
		}
	}
}

# This is separate to be able to update only when needed
tec_cache_country_civic_triggers = {
	tec_cache = {
		scope = country
		trigger = tec_is_psychohistorian_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_technomancer_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_starseeker_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_psi_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_bio_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_mecha_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_labrat_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_diversifier_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_astrologer_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_singularity_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_special_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_replaces_half_researcher_empire
	}
	# Cults
	tec_cache = {
		scope = country
		trigger = tec_is_death_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_machine_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_occult_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_paperwork_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_starseeker_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_atom_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_cycle_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_wealth_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_paranormal_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_butlerian_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_spiritualist_main_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_spiritualist_secondary_cult
	}
	# Ruler
	tec_cache = {
		scope = country
		trigger = tec_has_ruler_civic_regular
	}
	tec_cache = {
		scope = country
		trigger = tec_has_ruler_civic_mega
	}
	tec_cache = {
		scope = country
		trigger = tec_has_ruler_civic
	}
	
	tec_cache = {
		scope = country
		trigger = tec_has_ruler_civic_hive
	}
	tec_cache = {
		scope = country
		trigger = tec_has_maintenance_drone_swap_civic_hive
	}
	
	tec_cache = {
		scope = country
		trigger = tec_has_ruler_civic_machine
	}
	tec_cache = {
		scope = country
		trigger = tec_has_directive_civic_machine
	}
	tec_cache = {
		scope = country
		trigger = tec_has_maintenance_drone_swap_civic_machine
	}
	# Swaps

	tec_cache = {
		scope = country
		trigger = tec_has_entertainer_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_enforcer_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_colonist_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_clerk_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_coordinator_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_soldier_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_maintenance_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_patrol_drone_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_warrior_drone_swap
	}

	tec_cache = {
		scope = country
		trigger = tec_uses_regular_empire_jobs
	}

	# Types
	tec_cache = {
		scope = country
		trigger = tec_is_dystopian_empire
	}
}

tec_cache_councilor = {
	if = {
		limit = { 
			is_councilor_type = $type$
		}
		prev = { set_country_flag = tec_cache_tec_has_councilor_$type$ }
	}
}

tec_clean_councilor_cache = {
	remove_country_flag = tec_cache_tec_has_councilor_$type$
}

tec_cache_country_councilor_triggers = {
	# Clean flags
	tec_clean_councilor_cache = { type = councilor_gospel_of_the_masses }
	tec_clean_councilor_cache = { type = councilor_feudal_realm }
	tec_clean_councilor_cache = { type = councilor_corporate_anglers }
	tec_clean_councilor_cache = { type = councilor_corporate_hedonism }
	tec_clean_councilor_cache = { type = councilor_criminal_heritage }
	tec_clean_councilor_cache = { type = councilor_merchant_guilds }
	tec_clean_councilor_cache = { type = councilor_mining_guilds }
	tec_clean_councilor_cache = { type = councilor_private_military_companies }
	tec_clean_councilor_cache = { type = councilor_psionic_sovereign }
	tec_clean_councilor_cache = { type = councilor_warrior_culture }
	tec_clean_councilor_cache = { type = councilor_anglers }
	tec_clean_councilor_cache = { type = councilor_reanimated_armies }
	tec_clean_councilor_cache = { type = councilor_toxic_baths }
	tec_clean_councilor_cache = { type = councilor_corporate_toxic_baths }
	tec_clean_councilor_cache = { type = councilor_barbaric_despoilers }
	tec_clean_councilor_cache = { type = councilor_indentured_assets }
	tec_clean_councilor_cache = { type = councilor_trading_posts }

	every_owned_leader = {
		limit = {
			is_councilor = yes
		}
		# These are from vanilla
		tec_cache_councilor = { type = councilor_gospel_of_the_masses }
		tec_cache_councilor = { type = councilor_feudal_realm }
		tec_cache_councilor = { type = councilor_corporate_anglers }
		tec_cache_councilor = { type = councilor_corporate_hedonism }
		tec_cache_councilor = { type = councilor_criminal_heritage }
		tec_cache_councilor = { type = councilor_merchant_guilds }
		tec_cache_councilor = { type = councilor_mining_guilds }
		tec_cache_councilor = { type = councilor_private_military_companies }
		tec_cache_councilor = { type = councilor_psionic_sovereign }
		tec_cache_councilor = { type = councilor_warrior_culture }
		tec_cache_councilor = { type = councilor_anglers }
		tec_cache_councilor = { type = councilor_reanimated_armies }
		tec_cache_councilor = { type = councilor_toxic_baths }
		tec_cache_councilor = { type = councilor_corporate_toxic_baths }
		tec_cache_councilor = { type = councilor_barbaric_despoilers }
		tec_cache_councilor = { type = councilor_indentured_assets }
		tec_cache_councilor = { type = councilor_trading_posts }
		# These are from evolved
	}
}


# scope: country
tec_cache_opinions = {
	if = {
		limit = {
			OR = {
				tec_is_default_country = yes
				is_fallen_empire = yes
			}
		}
		every_spynetwork = {
			limit = {
				target = {
					has_established_contact = prevprev
					OR = {
						tec_is_default_country = yes
						is_fallen_empire = yes
					}
				}
			}
			target = {
				set_variable = {
					which = tec_cache_tec_opinion 
					value = 0
				}
				set_variable = {
					which = tec_cache_tec_their_opinion 
					value = 0
				}
				export_trigger_value_to_variable = { # we reverse them due to using this on target
					variable = tec_cache_tec_opinion
					trigger = their_opinion
					parameters = { who = prevprev }
				}
				export_trigger_value_to_variable = {
					variable = tec_cache_tec_their_opinion
					trigger = opinion
					parameters = { who = prevprev }
				}
			}
			set_variable = {
				which = tec_cache_tec_opinion
				value = target.tec_cache_tec_opinion
			}
			set_variable = {
				which = tec_cache_tec_their_opinion
				value = target.tec_cache_tec_their_opinion
			}
			set_variable = {
				which = tec_cache_tec_opinion_total
				value = tec_cache_tec_opinion
			}
			change_variable = {
				which = tec_cache_tec_opinion_total
				value = tec_cache_tec_their_opinion
			}
		}
	}
}

tec_cache_everything = {
	random_country = {
		country_event = {
			id = tec_caching.7
		}		
	}
}

tec_hoarders_recover_resource = {
	if = {
		limit = {
			is_variable_set = tec_$RESOURCE$_stockpile
		}
		set_variable = {
			which = tec_$RESOURCE$_recovered
			value = tec_$RESOURCE$_stockpile
		}
		divide_variable = {
			which = tec_$RESOURCE$_recovered
			value = 2
		}
		owner = {
			add_resource = {
				$RESOURCE$ = 1
				mult = prev.tec_$RESOURCE$_recovered
			}
		}
		clear_variable = tec_$RESOURCE$_stockpile
	} else = {
		set_variable = {
			which = tec_$RESOURCE$_recovered
			value = 0
		}
	}
}

tec_hoarders_withdraw_resource = {
	if = {
		limit = {
			is_variable_set = tec_$RESOURCE$_stockpile
		}
		owner = {
			add_resource = {
				$RESOURCE$ = 1
				mult = prev.tec_$RESOURCE$_stockpile
			}
		}
		clear_variable = tec_$RESOURCE$_stockpile
	}
	
}

tec_hoarders_manage_resource = {
	if = {
		limit = {
			has_planet_flag = tec_vault_manage_$RESOURCE$
		}
		event_target:tec_hoarders_managed_planet = {
			change_variable = {
				which = tec_$RESOURCE$_stockpile
				value = tec_stockpile_change
			}
			owner = {
				add_resource = {
					$RESOURCE$ = -1
					mult = prev.tec_stockpile_change
				}
			}
		}
	}
}

tec_terraformer_keeper_planet_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_sanctified_eco_grounds
		}
	}
}

tec_terraformer_keeper_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_sanctified_eco_grounds_ring
		}
	}
}

tec_terraformer_engineers_planet_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_eco_basin
		}
		10 = {
			add_deposit = d_tec_eco_glacier
		}
		10 = {
			add_deposit = d_tec_eco_jungle
		}
		10 = {
			add_deposit = d_tec_eco_kelp
		}
		10 = {
			add_deposit = d_tec_eco_mountains_range
		}
		10 = {
			add_deposit = d_tec_eco_sinkhole
		}
		10 = {
			add_deposit = d_tec_eco_swamp
		}
		10 = {
			add_deposit = d_tec_eco_volcano
		}
		10 = {
			add_deposit = d_tec_eco_wildlife_blocker
		}
	}
}

tec_terraformer_engineers_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_eco_synthetic_life
		}
		10 = {
			add_deposit = d_tec_eco_synthetic_volcano
		}
		10 = {
			add_deposit = d_tec_eco_synthetic_flora
		}
	}
}

tec_terraformer_environmentalist_planet_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_preserved_eco_ecology
		}
		10 = {
			add_deposit = d_tec_preserved_eco_mining
		}
		10 = {
			add_deposit = d_tec_preserved_eco_other
		}
	}
}

tec_terraformer_environmentalist_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_preserved_eco_ring
		}
		10 = {
			add_deposit = d_tec_preserved_eco_ring_2
		}
	}
}

tec_engineer_precursor_deposit_effect = {
	if = {
		limit = {
			this.solar_system = {
				any_system_planet = {
					OR = {
						has_planet_flag = precursor_world
						has_planet_flag = gpm_is_precursor_world
					}
				}
			}
		}
		add_deposit = d_tec_engineered_precursor
	}
}

tec_engineer_habitat_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_engineered_hangar
		}
		10 = {
			add_deposit = d_tec_engineered_industrial
		}
		10 = {
			add_deposit = d_tec_engineered_refinery
			random_list = {
				10 = {
					set_planet_flag = tec_engineer_chemist_refinery
				}
				10 = {
					set_planet_flag = tec_engineer_gas_refiner_refinery
				}
				10 = {
					set_planet_flag = tec_engineer_translucer_refinery
				}
			}
		}
	}
}

tec_engineer_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_engineered_eco_ring_1
		}
		10 = {
			add_deposit = d_tec_preserved_eco_ring_2			
		}
		10 = {
			add_deposit = d_tec_engineered_eco_ring_3
		}
	}
}

tec_terraformer_deposit_effect = {
	if = {
		limit = {
			owner = {
				tec_is_terraformer_keeper_empire = yes
			}
		}
		while = {
			count = $count$
			tec_terraformer_keeper_$type$_deposit_effect = yes
		}
	}
	if = {
		limit = {
			owner = {
				tec_is_terraformer_engineer_empire = yes
			}
		}
		while = {
			count = $count$
			tec_terraformer_engineers_$type$_deposit_effect = yes
		}
	}
	if = {
		limit = {
			owner = {
				tec_is_terraformer_environmentalist_empire = yes
			}
		}
		while = {
			count = $count$
			tec_terraformer_environmentalist_$type$_deposit_effect = yes
		}
	}
}

tec_add_engineered_weather = {
	if = {
		limit = {
			NOT = {
				has_modifier = pm_tec_engineered_weather
			}
		}
		add_modifier = {
			modifier = pm_tec_engineered_weather
			days = -1
		}
	}
}

tec_add_engineered_habitat = {
	if = {
		limit = {
			NOT = {
				has_modifier = pm_tec_engineered_habitat
			}
		}
		add_modifier = {
			modifier = pm_tec_engineered_habitat
			days = -1
		}
	}
}

tec_faction_terraform_effect = {
	change_variable = {
		which = tec_terraformed_worlds
		value = 1
	}
}

# Galactic Paragons

tec_country_get_robot_species = {
	if = {	# get true if exists
		# If the empire has robotic species, adapts the aiauth to it
		limit = {
			OR = {
				any_galaxy_species = {
					OR = {
						has_species_flag = mechanical_species@root
					}
					
				}
			}
		}
		random_galaxy_species = {
			limit = {
				has_species_flag = mechanical_species@root
			}
			save_event_target_as = tec_robot_search_species
		}
	}
	else_if = {	# Get fake then
		limit = {
			OR = {
				any_galaxy_species = {
					OR = {
						has_species_flag = mechanical_species_fake_@root
					}
					
				}
			}
		}
		random_galaxy_species = {
			limit = {
				has_species_flag = mechanical_species_fake_@root
			}
			save_event_target_as = tec_robot_search_species
		}
	}
	else = {
		# Creates a fake robot species
		# Later when the robot tech is researched the leader change species
		tec_create_fake_robot_species = yes
		last_created_species = {
			save_event_target_as = tec_robot_search_species
		}
	}
}

tec_country_aiauth_prepare_ai_species = {
	if = {
		limit = {
			NOT = { exists = event_target:tec_ai_species }
		}
		tec_country_get_robot_species = yes
		event_target:tec_robot_search_species = {
			save_event_target_as = tec_ai_species
		}
	}
}

tec_country_prepare_aiauth = {
	# Sets variable
	tec_country_aiauth_prepare_ai_species = yes
}

tec_country_create_aiauth_ruler  = {
	set_country_flag = tec_force_councilor_traits
	tec_country_aiauth_prepare_ai_species = yes
	create_leader = {
		class = governor
		species = event_target:tec_ai_species
		name = tec_aiauth_ruler
		skill = 1
		gender = indeterminable
		event_leader = yes
		skip_background_generation = yes
		can_manually_change_location = no
		can_see_in_list = yes
		custom_description = councilor_tec_aiauth_desc
		randomize_traits = yes
		background_ethic = ethic_gestalt_consciousness
		effect = {
			save_event_target_as = tec_aiauth_ruler
		}
	}
	event_target:tec_aiauth_ruler = {
		add_trait_no_notify = trait_tec_aiauth_ruler
		tec_leader_add_councilor_trait = yes
		set_owner = prev
		tec_leader_handle_starting_modifiers = {
			from = prev
		}
		change_leader_portrait = event_target:tec_ai_species
		set_leader_flag = leader_death_events_blocked
		set_leader_flag = tec_aiauth_ruler_@prev
	}
	assign_leader = event_target:tec_aiauth_ruler
	remove_country_flag = tec_force_councilor_traits
}

tec_country_create_aiauth_ruler_replace = {
	set_country_flag = tec_force_councilor_traits
	set_country_flag = tec_no_starting_traits_modification
	set_country_flag = tec_no_starting_skill_modification
	tec_country_aiauth_prepare_ai_species = yes
	clone_leader = {
		target = $RULER$
		species = event_target:tec_ai_species
		gender = indeterminable
		event_leader = yes
		skip_background_generation = yes
		can_manually_change_location = no
		can_see_in_list = yes
		custom_description = councilor_tec_aiauth_desc
		randomize_traits = no
		background_ethic = ethic_gestalt_consciousness
		effect = {
			save_event_target_as = tec_aiauth_ruler
			copy_flags_and_variables_from = $RULER$
		}
	}
	event_target:tec_aiauth_ruler = {
		add_trait_no_notify = trait_tec_aiauth_ruler
		tec_leader_add_councilor_trait = yes
		set_owner = prev
		change_leader_portrait = event_target:tec_ai_species
		set_leader_flag = leader_death_events_blocked
		set_leader_flag = tec_aiauth_ruler_@prev
	}
	assign_leader = event_target:tec_aiauth_ruler

	remove_country_flag = tec_force_councilor_traits
	remove_country_flag = tec_no_starting_traits_modification
	remove_country_flag = tec_no_starting_skill_modification

	$RULER$ = {
		exile_leader_as = destitute_ruler_ai_auth
	}
}

tec_country_create_aiauth_councilor = {
	set_country_flag = tec_force_councilor_traits
	tec_country_aiauth_prepare_ai_species = yes
	create_leader = {
		class = $CLASS$
		species = event_target:tec_ai_species
		name = $NAME$
		skill = 1
		gender = indeterminable
		event_leader = yes
		skip_background_generation = yes
		can_manually_change_location = no
		can_see_in_list = yes
		custom_description = $DESC$
		randomize_traits = yes
		background_ethic = $ETHIC|ethic_gestalt_consciousness$
		effect = {
			save_event_target_as = tec_aiauth_councilor
		}
	}
	event_target:tec_aiauth_councilor = {
		add_trait_no_notify = trait_tec_aiauth_node
		tec_leader_add_councilor_trait = yes
		set_owner = prev
		tec_leader_handle_starting_modifiers = {
			from = prev
		}
		set_gestalt_node_protrait_effect = yes
		[[COUNCIL_POS] set_council_position = $COUNCIL_POS$ ]
		set_leader_flag = leader_death_events_blocked
	}
	remove_country_flag = tec_force_councilor_traits
}

tec_country_refragment_aiauth_councilor = {
	if = {
		limit = {
			has_country_flag = tec_fragmenting_admiral
		}
		tec_country_create_aiauth_councilor = {
			CLASS = admiral
			NAME = councilor_tec_aiauth_fragment_admiral
			DESC = councilor_tec_aiauth_fragment_admiral_desc
			ETHIC = $ETHIC|ethic_gestalt_consciousness$
		}
	}
	else_if = {
		limit = {
			has_country_flag = tec_fragmenting_general
		}
		tec_country_create_aiauth_councilor = {
			CLASS = general
			NAME = councilor_tec_aiauth_fragment_general
			DESC = councilor_tec_aiauth_fragment_general_desc
			ETHIC = $ETHIC|ethic_gestalt_consciousness$
		}
	}
	else_if = {
		limit = {
			has_country_flag = tec_fragmenting_governor
		}
		tec_country_create_aiauth_councilor = {
			CLASS = governor
			NAME = councilor_tec_aiauth_fragment_governor
			DESC = councilor_tec_aiauth_fragment_governor_desc
			ETHIC = $ETHIC|ethic_gestalt_consciousness$
		}
	}
	else_if = {
		limit = {
			has_country_flag = tec_fragmenting_scientist
		}
		tec_country_create_aiauth_councilor = {
			CLASS = scientist
			NAME = councilor_tec_aiauth_fragment_scientist
			DESC = councilor_tec_aiauth_fragment_scientist_desc
			ETHIC = $ETHIC|ethic_gestalt_consciousness$
		}
	}
}

tec_country_create_aiauth_non_councilor = {
	set_country_flag = tec_force_normal_traits
	tec_country_aiauth_prepare_ai_species = yes
	create_leader = {
		class = $CLASS$
		species = event_target:tec_ai_species
		name = $NAME$
		skill = 1
		gender = indeterminable
		event_leader = yes
		skip_background_generation = yes
		can_manually_change_location = no
		can_see_in_list = yes
		can_assign_to_council = no
		custom_description = $DESC$
		randomize_traits = yes
		background_ethic = ethic_gestalt_consciousness
		effect = {
			save_event_target_as = tec_aiauth_non_councilor
		}
	}
	event_target:tec_aiauth_non_councilor = {
		add_trait_no_notify = trait_tec_aiauth_planetary_node
		set_owner = prev
		tec_leader_handle_starting_modifiers = {
			from = prev
		}
		set_gestalt_node_protrait_effect = yes
		set_leader_flag = leader_death_events_blocked
	}
	remove_country_flag = tec_force_normal_traits
}

tec_country_fragment_aiauth_node_cost = {
	add_resource = {
		unity = 1 
		mult = value:tec_aiauth_fragment_subtract_cost
	}
}


tec_country_defaulted_aiauth_ai_power_situation_tooltip = {
	tooltip = {
		owner = { tec_country_defaulted_aiauth_ai_power_effect = yes }
	}
	custom_tooltip = tec_deficit_situation_extra_ai_power_defaulted_tooltip
}

tec_country_defaulted_aiauth_ai_power_effect = {
	add_modifier = {
		modifier = pm_tec_country_ai_power_defaulted
		years = 10
	}
	hidden_effect = {
		if = {
			limit = { is_ai = yes }
			log = "AI [This.GetName] defaulted as a result of [Root.GetName] in [GetYear]"
		}
		else = {
			log = "Player [This.GetName] defaulted as a result of [Root.GetName] in [GetYear]"
		}
		every_owned_leader = {
			limit = {
				tec_is_aiauth_node = yes
				is_ruler = no
			}
			kill_leader = { show_notification = no }
		}
	}
	custom_tooltip = tec_end_ai_power_deficit_effect_tooltip
}
