tec_cache = {
	if = {
		limit = { $trigger$ = yes }
		set_$scope$_flag = $trigger$
	} else = {
		remove_$scope$_flag = $trigger$
	}
}

tec_cache_planet_type_triggers = {
	tec_cache = {
		scope = planet
		trigger = tec_is_arcology
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_space_arcology
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_habitat
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_ringworld
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_elysium
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_city_world
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_perfect_planet
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_neutral_planet
	}

	tec_cache = {
		scope = planet
		trigger = tec_has_all_slots_unlocked
	}
}

tec_cache_capital_triggers = {
	tec_cache = {
		scope = planet
		trigger = tec_has_t1_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t2_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t3_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t4_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t5_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_imperial_capital
	}
}

tec_cache_colony_triggers = {
	tec_cache = {
		scope = planet
		trigger = tec_has_ring_trade_hub
	}
}

tec_cache_planet_scope_triggers = {
	tec_cache_planet_type_triggers = yes
	tec_cache_capital_triggers = yes
	tec_cache_colony_triggers = yes
}

tec_cache_shackled_triggers = {
	tec_cache = {
		scope = pop
		trigger = tec_is_shackled_robot
	}
	tec_cache = {
		scope = pop
		trigger = tec_is_non_sapient_robot
	}
	tec_cache = {
		scope = pop
		trigger = tec_is_shackled_bioservant
	}
	
	tec_cache = {
		scope = pop
		trigger = tec_is_non_sapient_bioservant
	}
}


tec_cache_pop_triggers = {
	tec_cache = {
		scope = pop
		trigger = tec_purge_pop_category_trigger
	}
	tec_cache = {
		scope = pop
		trigger = tec_has_stapled_trait
	}
}


tec_hoarders_recover_resource = {
	if = {
		limit = {
			is_variable_set = tec_$RESOURCE$_stockpile
		}
		set_variable = {
			which = tec_$RESOURCE$_recovered
			value = tec_$RESOURCE$_stockpile
		}
		divide_variable = {
			which = tec_$RESOURCE$_recovered
			value = 2
		}
		owner = {
			add_resource = {
				$RESOURCE$ = 1
				mult = prev.tec_$RESOURCE$_recovered
			}
		}
		clear_variable = tec_$RESOURCE$_stockpile
	} else = {
		set_variable = {
			which = tec_$RESOURCE$_recovered
			value = 0
		}
	}
}

tec_hoarders_withdraw_resource = {
	if = {
		limit = {
			is_variable_set = tec_$RESOURCE$_stockpile
		}
		owner = {
			add_resource = {
				$RESOURCE$ = 1
				mult = prev.tec_$RESOURCE$_stockpile
			}
		}
		clear_variable = tec_$RESOURCE$_stockpile
	}
	
}

tec_hoarders_manage_resource = {
	if = {
		limit = {
			has_planet_flag = tec_vault_manage_$RESOURCE$
		}
		event_target:tec_hoarders_managed_planet = {
			change_variable = {
				which = tec_$RESOURCE$_stockpile
				value = tec_stockpile_change
			}
			owner = {
				add_resource = {
					$RESOURCE$ = -1
					mult = prev.tec_stockpile_change
				}
			}
		}
	}
}

tec_terraformer_keeper_planet_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_sanctified_eco_grounds
		}
	}
}

tec_terraformer_keeper_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_sanctified_eco_grounds_ring
		}
	}
}

tec_terraformer_engineers_planet_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_eco_basin
		}
		10 = {
			add_deposit = d_tec_eco_glacier
		}
		10 = {
			add_deposit = d_tec_eco_jungle
		}
		10 = {
			add_deposit = d_tec_eco_kelp
		}
		10 = {
			add_deposit = d_tec_eco_mountains_range
		}
		10 = {
			add_deposit = d_tec_eco_sinkhole
		}
		10 = {
			add_deposit = d_tec_eco_swamp
		}
		10 = {
			add_deposit = d_tec_eco_volcano
		}
		10 = {
			add_deposit = d_tec_eco_wildlife_blocker
		}
	}
}

tec_terraformer_engineers_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_eco_synthetic_life
		}
		10 = {
			add_deposit = d_tec_eco_synthetic_volcano
		}
		10 = {
			add_deposit = d_tec_eco_synthetic_flora
		}
	}
}

tec_terraformer_environmentalist_planet_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_preserved_eco_ecology
		}
		10 = {
			add_deposit = d_tec_preserved_eco_mining
		}
		10 = {
			add_deposit = d_tec_preserved_eco_other
		}
	}
}

tec_terraformer_environmentalist_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_preserved_eco_ring
		}
		10 = {
			add_deposit = d_tec_preserved_eco_ring_2
		}
	}
}

tec_engineer_precursor_deposit_effect = {
	if = {
		limit = {
			this.solar_system = {
				any_system_planet = {
					OR = {
						has_planet_flag = precursor_world
						has_planet_flag = gpm_is_precursor_world
					}
				}
			}
		}
		add_deposit = d_tec_engineered_precursor
	}
}

tec_engineer_habitat_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_engineered_hangar
		}
		10 = {
			add_deposit = d_tec_engineered_industrial
		}
		10 = {
			add_deposit = d_tec_engineered_refinery
			random_list = {
				10 = {
					set_planet_flag = tec_engineer_chemist_refinery
				}
				10 = {
					set_planet_flag = tec_engineer_gas_refiner_refinery
				}
				10 = {
					set_planet_flag = tec_engineer_translucer_refinery
				}
			}
		}
	}
}

tec_engineer_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_engineered_eco_ring_1
		}
		10 = {
			add_deposit = d_tec_preserved_eco_ring_2			
		}
		10 = {
			add_deposit = d_tec_engineered_eco_ring_3
		}
	}
}

tec_terraformer_deposit_effect = {
	if = {
		limit = {
			owner = {
				tec_is_terraformer_keeper_empire = yes
			}
		}
		while = {
			count = $count$
			tec_terraformer_keeper_$type$_deposit_effect = yes
		}
	}
	if = {
		limit = {
			owner = {
				tec_is_terraformer_engineer_empire = yes
			}
		}
		while = {
			count = $count$
			tec_terraformer_engineers_$type$_deposit_effect = yes
		}
	}
	if = {
		limit = {
			owner = {
				tec_is_terraformer_environmentalist_empire = yes
			}
		}
		while = {
			count = $count$
			tec_terraformer_environmentalist_$type$_deposit_effect = yes
		}
	}
}

tec_add_engineered_weather = {
	if = {
		limit = {
			NOT = {
				has_modifier = pm_tec_engineered_weather
			}
		}
		add_modifier = {
			modifier = pm_tec_engineered_weather
			days = -1
		}
	}
}

tec_add_engineered_habitat = {
	if = {
		limit = {
			NOT = {
				has_modifier = pm_tec_engineered_habitat
			}
		}
		add_modifier = {
			modifier = pm_tec_engineered_habitat
			days = -1
		}
	}
}

tec_faction_terraform_effect = {
	change_variable = {
		which = tec_terraformed_worlds
		value = 1
	}
}

# Galactic Paragons

tec_country_force_council_swaps = {
	force_add_civic = civic_tec_force_reform
	force_remove_civic = civic_tec_force_reform
}


tec_country_prepare_aiauth = {
	# Sets variables
	set_variable = {
		which = tec_max_aiauth_programs
		value = 4
	}
	set_variable = {
		which = tec_aiauth_used_programs
		value = 0
	}
	set_variable = {
		which = tec_aiauth_stored_programs
		value = 0
	}
	set_variable = {
		which = tec_aiauth_program_cost
		value = 500
	}
	if = {	# Has robotic species
		# If the empire has robotic species, adapts the aiauth to it
		limit = {
			OR = {
				has_country_flag = done_first_robot
				any_galaxy_species = {
					has_species_flag = mechanical_species@root
				}
			}
		}
		random_galaxy_species = {
			limit = {
				has_species_flag = mechanical_species@root
			}
			save_event_target_as = tec_ai_species
		}
	}
	else = {
		# Creates a fake robot species
		# Later when the robot tech is researched the leader change species
		tec_create_fake_robot_species = yes
		last_created_species = {
			save_event_target_as = tec_ai_species
		}
	}
}

tec_country_create_aiauth_ruler  = {
	set_global_flag = tec_force_councilor_traits
	random_galaxy_species = {
		limit = {
			has_species_flag = mechanical_species@prev
		}
		save_event_target_as = tec_ai_species
	}
	create_leader = {
		class = governor
		species = event_target:tec_ai_species
		name = tec_aiauth_ruler
		skill = 1
		gender = indeterminable
		event_leader = yes
		skip_background_generation = yes
		can_manually_change_location = no
		can_see_in_list = no
		custom_description = councilor_tec_aiauth_desc
		randomize_traits = no
		background_ethic = ethic_gestalt_consciousness
		effect = {
			save_event_target_as = tec_aiauth_ruler
		}
	}
	event_target:tec_aiauth_ruler = {
		set_owner = prev
		change_leader_portrait = event_target:tec_ai_species
		set_leader_flag = leader_death_events_blocked
		set_leader_flag = tec_aiauth_ruler_@prev

		add_trait_no_notify = trait_tec_aiauth_ruler
		tec_leader_add_councilor_trait = yes
	}
	set_leader = event_target:tec_aiauth_ruler
	remove_global_flag = tec_force_councilor_traits
}

tec_country_create_aiauth_ruler_replace = {
	set_global_flag = tec_force_councilor_traits
	random_galaxy_species = {
		limit = {
			has_species_flag = mechanical_species@prev
		}
		save_event_target_as = tec_ai_species
	}
	clone_leader = {
		target = $RULER$
		species = event_target:tec_ai_species
		skill = 1
		gender = indeterminable
		event_leader = yes
		skip_background_generation = yes
		can_manually_change_location = no
		can_see_in_list = no
		custom_description = councilor_tec_aiauth_desc
		background_ethic = ethic_gestalt_consciousness
		effect = {
			save_event_target_as = tec_aiauth_ruler
		}
	}

	event_target:tec_aiauth_ruler = {
		set_owner = prev
		change_leader_portrait = event_target:tec_ai_species
		set_leader_flag = leader_death_events_blocked
		set_leader_flag = tec_aiauth_ruler_@prev

		add_trait_no_notify = trait_tec_aiauth_ruler
		tec_leader_add_councilor_trait = yes
	}
	set_leader = event_target:tec_aiauth_ruler

	$RULER$ = {
		exile_leader_as = destitute_ruler_ai_auth
	}
	remove_global_flag = tec_force_councilor_traits
}

tec_country_create_aiauth_councilor = {
	set_global_flag = tec_force_councilor_traits
	random_galaxy_species = {
		limit = {
			has_species_flag = mechanical_species@prev
		}
		save_event_target_as = tec_ai_species
	}
	create_leader = {
		class = $CLASS$
		species = event_target:tec_ai_species
		name = $COUNCIL_POS$
		skill = 1
		gender = indeterminable
		event_leader = yes
		skip_background_generation = yes
		can_manually_change_location = no
		can_see_in_list = no
		custom_description = $DESC$
		randomize_traits = no
		background_ethic = ethic_gestalt_consciousness
		effect = {
			save_event_target_as = tec_aiauth_councilor
		}
	}
	event_target:tec_aiauth_councilor = {
		set_owner = prev
		change_leader_portrait = councilor_hive_$CLASS$_1
		set_council_position = $COUNCIL_POS$
		set_leader_flag = leader_death_events_blocked

		add_trait_no_notify = trait_tec_aiauth_node
		tec_leader_add_councilor_trait = yes
	}
	remove_global_flag = tec_force_councilor_traits
}

tec_leader_add_councilor_trait = {
	if = {
		limit = {
			has_paragon_dlc = yes
		}
		switch = {
			trigger = leader_class
			admiral = {
				add_trait_no_notify = subclass_admiral_strategist
			}
			scientist = {
				add_trait_no_notify = subclass_scientist_researcher
			}
			general = {
				add_trait_no_notify = subclass_general_marshall
			}
			governor = {
				add_trait_no_notify = subclass_governor_visionary
			}
		}
	}
}

# scope: leader
tec_leader_aiauth_add_experience = {
	add_trait = trait_tec_aiauth_fix_xp
	add_experience = $amount$
	remove_trait = trait_tec_aiauth_fix_xp
}