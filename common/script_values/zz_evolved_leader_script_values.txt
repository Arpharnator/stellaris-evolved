# common\script_values\zz_evolved_leader_script_values.txt

tec_leader_upkeep = {
	base = 1
	modifier = {	# Halved for specific civics
		# Modifier condition
			#tec_leader_is_true_idle = no
			OR = {
				is_idle = no
				AND = {
					is_idle = yes
					OR = {
						is_councilor = yes
						is_ruler = yes
					}
				}
			}
			# ^ This is used since leaders can be idle and in council 
			exists = owner
			switch = {
				trigger = leader_class
				official = {
					owner = {
						tec_reduces_upkeep_from_officials = yes
					}
				}
				commander = {
					owner = {
						tec_reduces_upkeep_from_commanders = yes
					}
				}
				scientist = {
					owner = {
						tec_reduces_upkeep_from_scientists = yes
					}
				}
			}
		# /
		mult = 0.5
	}
	mult = trigger:has_skill
}



# Scope: leader
tec_max_leader_skill = {	# Lets keep it existing just in case
	base = @tec_base_max_leader_skill_defines
	add = modifier:leader_skill_levels
	modifier = {
		is_ruler = yes
		add = modifier:ruler_skill_levels
	}

	modifier = {
		leader_class = official
		add = modifier:leader_official_skill_levels
	}
	modifier = {
		leader_class = commander
		add = modifier:leader_commander_skill_levels
	}
	modifier = {
		leader_class = scientist
		add = modifier:leader_scientist_skill_levels
	}
	
	max = @tec_max_leader_skill_defines
}

# Scope: leader
tec_leader_starting_skill_add = {
	base = 0
	add = modifier:tec_leader_starting_skill_add
	modifier = {
		leader_class = official
		add = modifier:tec_leader_official_starting_skill_add
	}
	modifier = {
		leader_class = commander
		add = modifier:tec_leader_commander_starting_skill_add
	}
	modifier = {
		leader_class = scientist
		add = modifier:tec_leader_scientist_starting_skill_add
	}
}

# Scope: leader
tec_leader_starting_traits_add = {
	base = 0
	add = modifier:tec_leader_starting_traits_add
	modifier = {
		leader_class = official
		add = modifier:tec_leader_official_starting_traits_add
	}
	modifier = {
		leader_class = commander
		add = modifier:tec_leader_commander_starting_traits_add
	}
	modifier = {
		leader_class = scientist
		add = modifier:tec_leader_scientist_starting_traits_add
	}
}

# Exp for level formula in base game is 300 * (level - 1) ^ 2 + 100 * (level - 1) + 400
# Scope: leader
tec_leader_experience_needed_for_level_up = {
	base = 300
	mult = value:_tec_leader_skill_adjusted
	# 300 * (level - 1) ^ 2 - the second (level - 1) is below

	add = 100
	mult = value:_tec_leader_skill_adjusted
	# 100 * (level - 1)

	add = 400
	# 400
}

_tec_leader_skill_adjusted = {
	add = trigger:has_skill
	subtract = 1
}

# Scope: leader
tec_leader_exp_gain = {
	base = 1
	add = modifier:species_leader_exp_gain
	modifier = {
		is_councilor = yes
		add = modifier:councilor_exp_gain
	}
	modifier = {
		leader_class = official
		add = modifier:official_exp_gain
	}
	modifier = {
		leader_class = commander
		add = modifier:commander_exp_gain
	}
	modifier = {
		leader_class = scientist
		add = modifier:scientist_exp_gain
	}
	# no way to handle specific councilor exp gain so whatever
}

tec_leader_not_count_towards_leader_cap_modifier_total = {
	add = modifier:tec_leader_not_count_towards_leader_cap
	modifier = {
		is_councilor = yes
		add = modifier:tec_councilor_not_count_towards_leader_cap
	}
	modifier = {
		leader_class = commander
		add = modifier:tec_commander_not_count_towards_leader_cap
	}
	modifier = {
		leader_class = official
		add = modifier:tec_official_not_count_towards_leader_cap
	}
	modifier = {
		leader_class = scientist
		add = modifier:tec_scientist_not_count_towards_leader_cap
	}
	
}

tec_leader_scientist_trait_production = {
	base = 1
	mult = $MULT$
	#mult = trigger:has_skill
	#modifier = { # Rubberbanding
	#	mult = 0.25
	#	years_passed <= 20
	#	#has_global_flag = tec_rubberbanding_1
	#}
	#modifier = { # Rubberbanding
	#	mult = 0.5
	#	years_passed > 20
	#	years_passed <= 30
	#	#has_global_flag = tec_rubberbanding_2
	#}
}